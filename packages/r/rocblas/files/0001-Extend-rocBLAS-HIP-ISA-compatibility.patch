From 89b75ff9cc731f71f370fad90517395e117b03bb Mon Sep 17 00:00:00 2001
From: Gavin Zhao <git@gzgz.dev>
Date: Mon, 19 Feb 2024 15:28:06 -0500
Subject: [PATCH] Extend rocBLAS HIP ISA compatibility

Signed-off-by: Gavin Zhao <git@gzgz.dev>
---
 library/src/handle.cpp            | 31 ++++++++++++++++++++--------
 library/src/rocblas_auxiliary.cpp | 31 +++++++++++++++++++++++-----
 library/src/tensile_host.cpp      | 34 +++++++++++++++++++++++--------
 3 files changed, 74 insertions(+), 22 deletions(-)

diff --git a/library/src/handle.cpp b/library/src/handle.cpp
index 7b08a934..64530cf5 100644
--- a/library/src/handle.cpp
+++ b/library/src/handle.cpp
@@ -117,14 +117,6 @@ static Processor getActiveArch(int deviceId)
     {
         return Processor::gfx1010;
     }
-    else if(deviceString.find("gfx1011") != std::string::npos)
-    {
-        return Processor::gfx1011;
-    }
-    else if(deviceString.find("gfx1012") != std::string::npos)
-    {
-        return Processor::gfx1012;
-    }
     else if(deviceString.find("gfx1030") != std::string::npos)
     {
         return Processor::gfx1030;
@@ -141,6 +133,29 @@ static Processor getActiveArch(int deviceId)
     {
         return Processor::gfx1102;
     }
+
+    size_t pos = std::string::npos;
+    if((pos = deviceString.find("gfx103")) != std::string::npos)
+    {
+        return Processor::gfx1030;
+    }
+    else if((pos = deviceString.find("gfx101")) != std::string::npos)
+    {
+        return Processor::gfx1010;
+    }
+    else if((pos = deviceString.find("gfx90")) != std::string::npos)
+    {
+        constexpr int cmpIdx = std::char_traits<char>::length("gfx90");
+        if(pos + cmpIdx < deviceString.size())
+        {
+            if(deviceString.at(pos + cmpIdx) == '2' || deviceString.at(pos + cmpIdx) == '9'
+               || deviceString.at(pos + cmpIdx) == 'c')
+            {
+                return Processor::gfx900;
+            }
+        }
+    }
+
     return static_cast<Processor>(0);
 }
 
diff --git a/library/src/rocblas_auxiliary.cpp b/library/src/rocblas_auxiliary.cpp
index 14541a53..46acd3de 100644
--- a/library/src/rocblas_auxiliary.cpp
+++ b/library/src/rocblas_auxiliary.cpp
@@ -1225,11 +1225,7 @@ bool rocblas_internal_tensile_supports_ldc_ne_ldd(rocblas_handle handle)
 
 bool rocblas_internal_tensile_supports_xdl_math_op(rocblas_math_mode mode)
 {
-    int deviceId;
-    hipGetDevice(&deviceId);
-    hipDeviceProp_t deviceProperties;
-    hipGetDeviceProperties(&deviceProperties, deviceId);
-    std::string deviceString(deviceProperties.gcnArchName);
+    std::string deviceString = rocblas_internal_get_arch_name();
     return ((deviceString.find("gfx940") != std::string::npos)
             || (deviceString.find("gfx941") != std::string::npos)
             || (deviceString.find("gfx942") != std::string::npos));
@@ -1242,6 +1238,31 @@ std::string rocblas_internal_get_arch_name()
     hipGetDevice(&deviceId);
     hipDeviceProp_t deviceProperties;
     hipGetDeviceProperties(&deviceProperties, deviceId);
+
+    // coerce arch name
+    std::string archName(deviceProperties.gcnArchName);
+    size_t      pos = std::string::npos;
+    if((pos = archName.find("gfx103")) != std::string::npos)
+    {
+        std::strcpy(deviceProperties.gcnArchName, "gfx1030");
+    }
+    else if((pos = archName.find("gfx101")) != std::string::npos)
+    {
+        std::strcpy(deviceProperties.gcnArchName, "gfx1010");
+    }
+    else if((pos = archName.find("gfx90")) != std::string::npos)
+    {
+        constexpr int cmpIdx = std::char_traits<char>::length("gfx90");
+        if(pos + cmpIdx < archName.size())
+        {
+            if(archName.at(pos + cmpIdx) == '2' || archName.at(pos + cmpIdx) == '9'
+               || archName.at(pos + cmpIdx) == 'c')
+            {
+                std::strcpy(deviceProperties.gcnArchName, "gfx900");
+            }
+        }
+    }
+
     return ArchName<hipDeviceProp_t>{}(deviceProperties);
 }
 
diff --git a/library/src/tensile_host.cpp b/library/src/tensile_host.cpp
index cd6446e2..acb9d25c 100644
--- a/library/src/tensile_host.cpp
+++ b/library/src/tensile_host.cpp
@@ -245,14 +245,6 @@ namespace
         {
             return Tensile::LazyLoadingInit::gfx1010;
         }
-        else if(deviceString.find("gfx1011") != std::string::npos)
-        {
-            return Tensile::LazyLoadingInit::gfx1011;
-        }
-        else if(deviceString.find("gfx1012") != std::string::npos)
-        {
-            return Tensile::LazyLoadingInit::gfx1012;
-        }
         else if(deviceString.find("gfx1030") != std::string::npos)
         {
             return Tensile::LazyLoadingInit::gfx1030;
@@ -269,6 +261,29 @@ namespace
         {
             return Tensile::LazyLoadingInit::gfx1102;
         }
+
+        size_t pos = std::string::npos;
+        if((pos = deviceString.find("gfx103")) != std::string::npos)
+        {
+            return Tensile::LazyLoadingInit::gfx1030;
+        }
+        else if((pos = deviceString.find("gfx101")) != std::string::npos)
+        {
+            return Tensile::LazyLoadingInit::gfx1010;
+        }
+        else if((pos = deviceString.find("gfx90")) != std::string::npos)
+        {
+            constexpr int cmpIdx = std::char_traits<char>::length("gfx90");
+            if(pos + cmpIdx < deviceString.size())
+            {
+                if(deviceString.at(pos + cmpIdx) == '2' || deviceString.at(pos + cmpIdx) == '9'
+                   || deviceString.at(pos + cmpIdx) == 'c')
+                {
+                    return Tensile::LazyLoadingInit::gfx900;
+                }
+            }
+        }
+
         return Tensile::LazyLoadingInit::None;
     }
 
@@ -799,9 +814,10 @@ namespace
                         //populate device property map, used in finding solutions based on arch
                         HIP_CHECK_EXC(hipGetDeviceProperties(&prop, devId));
                         // strip out xnack/ecc from name
-                        std::string deviceFullString(prop.gcnArchName);
+                        std::string deviceFullString = rocblas_internal_get_arch_name();
                         std::string deviceString
                             = deviceFullString.substr(0, deviceFullString.find(":"));
+                        std::strcpy(prop.gcnArchName, deviceFullString.c_str());
                         m_devicePropMap[deviceString] = std::make_shared<hipDeviceProp_t>(prop);
                     }
                 }
-- 
2.43.1

