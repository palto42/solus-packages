--- ./librawstudio/rs-utils.c.orig	2024-05-12 20:26:34.704388810 +0100
+++ ./librawstudio/rs-utils.c	2024-05-12 20:40:17.622573003 +0100
@@ -72,18 +72,27 @@ rs_atof(const gchar *str)
  * @param str A NULL terminated string containing a timestamp in the format "YYYY:MM:DD HH:MM:SS" (EXIF 2.2 section 4.6.4)
  * @return A unix timestamp or -1 on error
  */
-GTime
+GDateTime *
 rs_exiftime_to_unixtime(const gchar *str)
 {
 	struct tm *tm;
-	GTime timestamp = -1;
+	GDateTime *timestamp = NULL;
 
-	g_return_val_if_fail(str != NULL, -1);
+	g_return_val_if_fail(str != NULL, NULL);
 
 	tm = g_new0(struct tm, 1);
 
 	if (strptime(str, "%Y:%m:%d %H:%M:%S", tm))
-		timestamp = (GTime) mktime(tm);
+	{
+		timestamp = g_date_time_new_local(
+			tm->tm_year + 1900,
+			tm->tm_mon + 1,
+			tm->tm_mday,
+			tm->tm_hour,
+			tm->tm_min,
+			tm->tm_sec
+		);
+	}
 
 	g_free(tm);
 
@@ -97,12 +106,15 @@ rs_exiftime_to_unixtime(const gchar *str
  * @return A string formatted as specified in EXIF 2.2 section 4.6.4
  */
 gchar *
-rs_unixtime_to_exiftime(GTime timestamp)
+rs_unixtime_to_exiftime(GDateTime *timestamp)
 {
 	struct tm *tm = g_new0(struct tm, 1);
-	time_t tt = (time_t) timestamp;
 	gchar *result = g_new0(gchar, 20);
 
+	g_return_val_if_fail(timestamp != NULL, NULL);
+
+	time_t tt = g_date_time_to_unix(g_date_time_to_utc(timestamp));
+
 	gmtime_r(&tt, tm);
 
 	if (strftime(result, 20, "%Y:%m:%d %H:%M:%S", tm) != 19)
--- ./librawstudio/rs-utils.h.orig	2024-05-12 20:38:28.185814756 +0100
+++ ./librawstudio/rs-utils.h	2024-05-12 20:40:39.027525721 +0100
@@ -42,7 +42,7 @@ extern gdouble rs_atof(const gchar *str)
  * @param str A NULL terminated string containing a timestamp in the format "YYYY:MM:DD HH:MM:SS" (EXIF 2.2 section 4.6.4)
  * @return A unix timestamp or -1 on error
  */
-GTime
+GDateTime *
 rs_exiftime_to_unixtime(const gchar *str);
 
 /**
@@ -52,7 +52,7 @@ rs_exiftime_to_unixtime(const gchar *str
  * @return A string formatted as specified in EXIF 2.2 section 4.6.4
  */
 gchar *
-rs_unixtime_to_exiftime(GTime timestamp);
+rs_unixtime_to_exiftime(GDateTime *timestamp);
 
 /**
  * Constrains a box to fill a bounding box without changing aspect
--- ./librawstudio/rs-metadata.h.orig	2024-05-12 20:36:25.389086040 +0100
+++ ./librawstudio/rs-metadata.h	2024-05-12 20:37:09.148989361 +0100
@@ -65,7 +65,7 @@ struct _RSMetadata {
 	gchar *make_ascii;
 	gchar *model_ascii;
 	gchar *time_ascii;
-	GTime timestamp;
+	GDateTime *timestamp;
 	gushort orientation;
 	gfloat aperture;
 	gfloat exposurebias;
--- ./plugins/meta-ciff/ciff-meta.c.orig	2024-05-12 21:20:02.445301958 +0100
+++ ./plugins/meta-ciff/ciff-meta.c	2024-05-12 21:21:34.108099451 +0100
@@ -164,7 +164,8 @@ raw_crw_walker(RAWFILE *rawfile, guint o
 				{
 					raw_get_uint(rawfile, absoffset, &uint_temp1);
 					meta->time_ascii = rs_unixtime_to_exiftime(uint_temp1);
-					meta->timestamp = (GTime) uint_temp1;
+					GDateTime *timestamp = g_date_time_new_from_unix_utc(uint_temp1);
+					meta->timestamp = timestamp;
 				}
 				break;
 			case 0x10a9: /* white balance for D60, 10D, 300D */
--- ./librawstudio/rs-library.c.orig	2024-05-12 21:34:01.626449280 +0100
+++ ./librawstudio/rs-library.c	2024-05-12 21:36:21.354140813 +0100
@@ -858,14 +858,12 @@ library_photo_default_tags(RSLibrary *li
 		tags = g_list_append(tags, g_strdup(text));
 		g_free(text);
 	}
-	if (metadata->timestamp != -1)
+	if (metadata->timestamp != NULL)
 	{
 		gchar *year = NULL;
 		gchar *month = NULL;
-		GDate *date = g_date_new();
-		g_date_set_time_t(date, metadata->timestamp);
-		year = g_strdup_printf("%d", g_date_get_year(date));
-		gint m = g_date_get_month(date);
+		year = g_strdup_printf("%d",  g_date_time_get_year(metadata->timestamp));
+		gint m = g_date_time_get_month(metadata->timestamp);
 
 		switch (m)
 		{
@@ -910,7 +908,6 @@ library_photo_default_tags(RSLibrary *li
 		tags = g_list_append(tags, g_strdup(year));
 		tags = g_list_append(tags, g_strdup(month));
 
-		g_date_free(date);
 		g_free(year);
 		g_free(month);
 	}
--- ./librawstudio/rs-metadata.c.orig	2024-05-12 21:40:13.240628603 +0100
+++ ./librawstudio/rs-metadata.c	2024-05-13 00:15:11.257048233 +0100
@@ -80,7 +80,7 @@ rs_metadata_init (RSMetadata *metadata)
 	metadata->make_ascii = NULL;
 	metadata->model_ascii = NULL;
 	metadata->time_ascii = NULL;
-	metadata->timestamp = -1;
+	metadata->timestamp = NULL;
 	metadata->orientation = 0;
 	metadata->aperture = -1.0;
 	metadata->exposurebias = -999.0;
@@ -152,8 +152,10 @@ rs_metadata_cache_save(RSMetadata *metad
 			xmlTextWriterWriteFormatElement(writer, BAD_CAST "model_ascii", "%s", metadata->model_ascii);
 		if (metadata->time_ascii)
 			xmlTextWriterWriteFormatElement(writer, BAD_CAST "time_ascii", "%s", metadata->time_ascii);
-		if (metadata->timestamp > -1)
-			xmlTextWriterWriteFormatElement(writer, BAD_CAST "timestamp", "%d", metadata->timestamp);
+		if (metadata->timestamp) {
+			gchar *formattedTimestamp = g_date_time_format(metadata->timestamp, "%Y-%m-%dT%H:%M:%S");
+			xmlTextWriterWriteFormatElement(writer, BAD_CAST "timestamp", "%s", formattedTimestamp);
+        }
 		/* Can we make orientation conditional? */
 		xmlTextWriterWriteFormatElement(writer, BAD_CAST "orientation", "%u", metadata->orientation);
 		if (metadata->aperture > -1.0)
@@ -269,7 +271,8 @@ rs_metadata_cache_load(RSMetadata *metad
 			else if ((!xmlStrcmp(cur->name, BAD_CAST "timestamp")))
 			{
 				val = xmlNodeListGetString(doc, cur->xmlChildrenNode, 1);
-				metadata->timestamp = atoi((gchar *) val);
+				GDateTime *timestamp = g_date_time_new_from_iso8601((const gchar *)val, NULL);
+				metadata->timestamp = timestamp;
 				xmlFree(val);
 			}
 			else if ((!xmlStrcmp(cur->name, BAD_CAST "orientation")))
--- ./src/rs-store.c.orig	2024-05-13 00:46:52.086851995 +0100
+++ ./src/rs-store.c	2024-05-13 00:50:14.250405627 +0100
@@ -838,9 +838,12 @@ model_sort_timestamp(GtkTreeModel *model
 
 	gtk_tree_model_get(model, tia, METADATA_COLUMN, &a, -1);
 	gtk_tree_model_get(model, tib, METADATA_COLUMN, &b, -1);
-
-	if ((a!=NULL) && (b!=NULL) && (a->timestamp != b->timestamp))
-		ret = a->timestamp - b->timestamp;
+	if ((a!=NULL) && (b!=NULL) && a->timestamp != NULL && b->timestamp != NULL && (a->timestamp != b->timestamp)) {
+		gint64 a_unix = g_date_time_to_unix(a->timestamp);
+		gint64 b_unix = g_date_time_to_unix(b->timestamp);
+		if (a_unix != b_unix)
+			ret = a_unix - b_unix;
+	}
 	else
 		ret = model_sort_name(model, tia, tib, userdata);
 

