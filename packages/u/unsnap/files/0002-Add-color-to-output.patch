From 2fa024e2d2592fb87f6070557c95ad68711a6537 Mon Sep 17 00:00:00 2001
From: Lucas Burlingham <lucas@lucasburlingham.me>
Date: Wed, 6 Apr 2022 07:40:21 -0400
Subject: [PATCH 02/11] Add color to output

---
 unsnap | 115 +++++++++++++++++++++++++++++++--------------------------
 1 file changed, 63 insertions(+), 52 deletions(-)

diff --git a/unsnap b/unsnap
index c7f2db3..18ade18 100755
--- a/unsnap
+++ b/unsnap
@@ -3,8 +3,19 @@
 # unsnap - a tool to migrate away from snaps
 # shellcheck disable=SC2129
 
+# Define some ANSI colors
+RED='\033[0;31m'
+GREEN='\033[0;32m'
+YELLOW='\033[0;33m'
+BLUE='\033[0;34m'
+PURPLE='\033[0;35m'
+CYAN='\033[0;36m'
+WHITE='\033[0;37m'
+NC='\033[0m' # No Color
+
+
 function display_warnings() {
-    echo "WARNING! Care has been taken to ensure this script is safe."
+    echo -e "${YELLOW}WARNING:${NC} Care has been taken to ensure this script is safe."
     echo "The generated scripts will remove applications and data."
     echo "Please ensure you have backups in case you need to recover data."
     echo "Also note significant disk space may be required to migrate,"
@@ -29,7 +40,7 @@ function setup_environment() {
     REMOVESNAPDSCRIPT="$LOGDIR/99-remove-snapd"
     SHEBANG="#!/usr/bin/env bash"
     RECOMMENDREBOOT="no"
-    REBOOTTEXT="WARNING: Please logout/in or reboot, to ensure applications appear in your desktop menu"
+    REBOOTTEXT="${YELLOW}WARNING:${NC} Please logout/in or reboot, to ensure applications appear in your desktop menu"
     PACKAGEMGR="unknown"
 }
 
@@ -78,16 +89,16 @@ function check_for_snap() {
     # Check for the existence of a an executable snap binary.
     # If snap doesn't exist or work, likelyhood is no snaps are installed either
     # so we exit out.
-    echo "INFO: Checking for snap binary"  | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Checking for snap binary"  | tee -a "$LOGFILE"
     if [ -x "$(command -v snap)" ]; then
-        echo "INFO: snap found" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} snap found" | tee -a "$LOGFILE"
     else
-        echo "ERROR: snapd doesn't appear to be installed, exiting." | tee -a "$LOGFILE"
+        echo -e "${RED}ERROR:${NC} snapd doesn't appear to be installed, exiting." | tee -a "$LOGFILE"
         exit 1
     fi
-    echo "INFO: Check for any snaps installed" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Check for any snaps installed" | tee -a "$LOGFILE"
     if [ "$(snap list | wc -l)" == "0" ]; then 
-        echo "ERROR: No snaps installed, nothing to do here!" | tee -a "$LOGFILE"
+        echo -e "${RED}ERROR:${NC} No snaps installed, nothing to do here!" | tee -a "$LOGFILE"
         exit 6
     fi
 }
@@ -97,7 +108,7 @@ function generate_flatpak_install_script() {
     # As flatpak binary may not be installed (especially on Ubuntu and some derivatives)
     # TODO: We assume use of sudo here, which we really shouldn't, but instead tell user
     # to run script using sudo or root.
-    echo "INFO: Generating flatpak installer script in $INSTALLFLATPACKSCRIPT" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Generating flatpak installer script in $INSTALLFLATPACKSCRIPT" | tee -a "$LOGFILE"
     echo "$SHEBANG" > "$INSTALLFLATPACKSCRIPT"
     echo "# Documentation: https://flatpak.org/setup/" >> "$INSTALLFLATPACKSCRIPT"
     case $PACKAGEMGR in
@@ -138,7 +149,7 @@ sudo eopkg install flatpak
 EOT
             ;;
         *)
-            echo "ERROR: Unable to generate flatpak install script. Unimplemented Package Manager." | tee -a "$LOGFILE"
+            echo -e "${RED}ERROR:${NC} Unable to generate flatpak install script. Unimplemented Package Manager." | tee -a "$LOGFILE"
             exit 5
     esac
     RECOMMENDREBOOT="yes"
@@ -150,7 +161,7 @@ function generate_packages_install_script() {
     # Generate shell script to install each flatpak in turn
     # TODO: Should also wrap each install to detect if it fails, and stop to cope
     # with error situations like disk full.
-    echo "INFO: Generating flatpaks installer script in $INSTALLPACKAGESSCRIPT" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Generating flatpaks installer script in $INSTALLPACKAGESSCRIPT" | tee -a "$LOGFILE"
     echo "$SHEBANG" > "$INSTALLPACKAGESSCRIPT"
     echo -n "for f in " >> "$INSTALLPACKAGESSCRIPT"
     while IFS="" read -r p || [ -n "$p" ]
@@ -158,7 +169,7 @@ function generate_packages_install_script() {
         snap=$p
         flatpak=$(grep "^$p" "$APPLIST" | awk -F ',' '{ print $2}')
         if [ "$flatpak" == "" ]; then
-            echo "WARNING: No equivalent flatpak for $snap found" | tee -a "$LOGFILE"
+            echo -e "${YELLOW}WARNING:${NC} No equivalent flatpak for $snap found" | tee -a "$LOGFILE"
             echo "$snap" >> "$MISSINGFLATPAK"
         else
             echo -n "$flatpak " >> "$INSTALLPACKAGESSCRIPT"
@@ -176,7 +187,7 @@ function generate_flathub_enablement_script() {
     # the user hasn't already enabled it as (currently) all the applications we 
     # install are from flathub - but this could change in the future.
     # flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
-    echo "INFO: Generating flathub enablement script in $ENABLEFLATHUBSRIPT" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Generating flathub enablement script in $ENABLEFLATHUBSRIPT" | tee -a "$LOGFILE"
     echo "$SHEBANG" > "$ENABLEFLATHUBSRIPT" 
     echo "sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo" >> "$ENABLEFLATHUBSRIPT"
     chmod +x "$ENABLEFLATHUBSRIPT"
@@ -184,7 +195,7 @@ function generate_flathub_enablement_script() {
 
 function generate_remove_snaps_script() {
     # Generate a shell script to remove each snap in turn.
-    echo "INFO: Generating snap removal script in $REMOVESNAPSSCRIPT" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Generating snap removal script in $REMOVESNAPSSCRIPT" | tee -a "$LOGFILE"
     echo "$SHEBANG" > "$REMOVESNAPSSCRIPT" 
     echo -n "for s in " >> "$REMOVESNAPSSCRIPT"
     # Iterate through the filtered list of snaps (that is snaps which aren't excluded from matching)
@@ -193,7 +204,7 @@ function generate_remove_snaps_script() {
         snap=$(echo "$p" | awk -F ',' '{ print $1}')
         # Check to make sure the snap isn't on the missing list.
         if grep "$snap" "$MISSINGFLATPAK"; then
-            echo "WARNING: $snap snap has no equivalent, not candidate for removing" | tee -a "$LOGFILE"
+            echo -e "${YELLOW}WARNING:${NC} $snap snap has no equivalent, not candidate for removing" | tee -a "$LOGFILE"
         else
             echo -n "$snap " >> "$REMOVESNAPSSCRIPT"
         fi
@@ -212,7 +223,7 @@ function generate_remove_snapd_script() {
     # Note that currently we assume sudo, but for some distros, that won't work
     # so we might be better off removing all references to sudo, and inform the user
     # to run the script as "root user or sudo as appropriate".
-    echo "INFO: Generating snapd removal script in $REMOVESNAPDSCRIPT" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Generating snapd removal script in $REMOVESNAPDSCRIPT" | tee -a "$LOGFILE"
     echo "$SHEBANG" > "$REMOVESNAPDSCRIPT" 
     echo "echo Removing snapd" >> "$REMOVESNAPDSCRIPT" 
     case $PACKAGEMGR in
@@ -235,7 +246,7 @@ function generate_remove_snapd_script() {
             echo "sudo eopkg remove snapd" >> "$REMOVESNAPDSCRIPT"
             ;;
         *)
-            echo "ERROR: Unable to generate snapd removal script. Unimplemented package manager." | tee -a "$LOGFILE"
+            echo -e "${RED}ERROR:${NC} Unable to generate snapd removal script. Unimplemented package manager." | tee -a "$LOGFILE"
     esac
     chmod +x "$REMOVESNAPDSCRIPT"
 }
@@ -246,7 +257,7 @@ function generate_backup_script() {
     # might run the 'remove snapd' script, which will nuke all their snaps, not just migrated
     # ones.
     # Not all snaps store data in their own directory - classic snaps being a good culprit
-    echo "INFO: Generating snap backup script in $BACKUPSCRIPT"  | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Generating snap backup script in $BACKUPSCRIPT"  | tee -a "$LOGFILE"
     echo "$SHEBANG" > "$BACKUPSCRIPT" 
     echo "# Documentation: https://snapcraft.io/docs/snapshots" >> "$BACKUPSCRIPT"
     echo -n "sudo snap save " >> "$BACKUPSCRIPT"
@@ -262,12 +273,12 @@ function generate_backup_script() {
 function check_for_flatpak() {
     # Check if the flatpak binary exists, and if it doesn't call 
     # function to generate a script to install flatpak
-    echo "INFO: Checking for flatpak binary" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Checking for flatpak binary" | tee -a "$LOGFILE"
     if [ -x "$(command -v flatpak)" ]; then
-        echo "INFO: flatpak found no need to generate flatpak install script" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} flatpak found no need to generate flatpak install script" | tee -a "$LOGFILE"
         check_for_flathub
     else
-        echo "INFO: flatpak doesn't appear to be installed, adding installer script and enabling flathub" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} flatpak doesn't appear to be installed, adding installer script and enabling flathub" | tee -a "$LOGFILE"
         generate_flatpak_install_script
         generate_flathub_enablement_script
     fi
@@ -276,11 +287,11 @@ function check_for_flatpak() {
 function check_for_flathub() {
     # Check if flathub is a configured remote and if not, call function to 
     # generate a script which enables it.
-    echo "INFO: Checking for flathub remote" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Checking for flathub remote" | tee -a "$LOGFILE"
     if flatpak remotes | grep flathub > /dev/null; then
-        echo "INFO: flathub already enabled" |  tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} flathub already enabled" |  tee -a "$LOGFILE"
     else
-        echo "INFO: flathub doesn't appear to be enabled" |  tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} flathub doesn't appear to be enabled" |  tee -a "$LOGFILE"
         generate_flathub_enablement_script
     fi
 }
@@ -294,20 +305,20 @@ function determine_packagemanager() {
             PACKAGEMGR="$PACKAGEMGR"
             ;;
         *)
-            echo "ERROR: Could not determine appropriate package manager, '$PACKAGEMGR' aborting" | tee -a "$LOGFILE"
+            echo -e "${RED}ERROR:${NC} Could not determine appropriate package manager, '$PACKAGEMGR' aborting" | tee -a "$LOGFILE"
             exit 2
             ;;
     esac
-    echo "INFO: Detected $PACKAGEMGR as package manager" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Detected $PACKAGEMGR as package manager" | tee -a "$LOGFILE"
 }
 
 function get_installed_snaps() {
     # Get list of currently installed snaps on this machine
     # Then filter out excluded snaps, for which we know there is no
     # equivalent in flathub (such as platform / theme snaps)
-    echo "INFO! Getting list of installed snaps to $INSTALLEDSNAPLIST" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Getting list of installed snaps to $INSTALLEDSNAPLIST" | tee -a "$LOGFILE"
     snap list | tail -n +2 | awk -F " " '{ print $1 }' > "$INSTALLEDSNAPLIST"
-    echo "INFO! Trimming list of installed snaps to $FILTEREDSNAPLIST" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Trimming list of installed snaps to $FILTEREDSNAPLIST" | tee -a "$LOGFILE"
     grep -v -f "$EXCLUDEDSNAPLIST" "$INSTALLEDSNAPLIST" > "$FILTEREDSNAPLIST"
 }
 
@@ -318,72 +329,72 @@ function cleanup() {
 
 function run_scripts() {
     # Run the actual scripts one by one, stopping on error
-    echo "INFO: Running backup" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Running backup" | tee -a "$LOGFILE"
     if "$BACKUPSCRIPT"; then
-        echo "INFO: Backup finished" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} Backup finished" | tee -a "$LOGFILE"
     else
-        echo "ERROR: Backup failed" | tee -a "$LOGFILE"
+        echo -e "${RED}ERROR:${NC} Backup failed" | tee -a "$LOGFILE"
         exit 10
     fi
     if test -f "$INSTALLFLATPACKSCRIPT"; then
-        echo "INFO: Installing flatpak" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} Installing flatpak" | tee -a "$LOGFILE"
         if "$INSTALLFLATPACKSCRIPT"; then
-            echo "INFO: Installing flatpak finished" | tee -a "$LOGFILE"
+            echo -e "${GREEN}INFO:${NC} Installing flatpak finished" | tee -a "$LOGFILE"
         else
-            echo "ERROR: Install flatpak failed" | tee -a "$LOGFILE"
+            echo -e "${RED}ERROR:${NC} Install flatpak failed" | tee -a "$LOGFILE"
             exit 11
         fi
     else
-        echo "INFO: Skipping installing flatpak, already installed" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} Skipping installing flatpak, already installed" | tee -a "$LOGFILE"
     fi
     if test -f "$ENABLEFLATHUBSRIPT"; then
-        echo "INFO: Enabling flathub" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} Enabling flathub" | tee -a "$LOGFILE"
         if "$ENABLEFLATHUBSRIPT"; then
-            echo "INFO: Flathub enabled" | tee -a "$LOGFILE"
+            echo -e "${GREEN}INFO:${NC} Flathub enabled" | tee -a "$LOGFILE"
         else
-            echo "ERROR: Enabling flathub failed" | tee -a "$LOGFILE"
+            echo -e "${RED}ERROR:${NC} Enabling flathub failed" | tee -a "$LOGFILE"
             exit 12
         fi
     else
-        echo "INFO: Skipping enabling flathub, already enabled" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} Skipping enabling flathub, already enabled" | tee -a "$LOGFILE"
     fi
-    echo "INFO: Installing flatpak packages" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Installing flatpak packages" | tee -a "$LOGFILE"
     if "$INSTALLPACKAGESSCRIPT"; then
-        echo "INFO: flatpaks installed" | tee -a "$LOGFILE"
-        echo "INFO: These flatpaks are now installed:" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} flatpaks installed" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} These flatpaks are now installed:" | tee -a "$LOGFILE"
         flatpak list | tee -a "$LOGFILE"
     else
-        echo "ERROR: Failed to install flatpaks" | tee -a "$LOGFILE"
+        echo -e "${RED}ERROR:${NC} Failed to install flatpaks" | tee -a "$LOGFILE"
         exit 13
     fi
-    echo "INFO: Removing snaps" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Removing snaps" | tee -a "$LOGFILE"
     if "$REMOVESNAPSSCRIPT"; then
-        echo "INFO: Snaps removed" | tee -a "$LOGFILE"
-        echo "WARNING: These snaps are still installed:" | tee -a "$LOGFILE"
+        echo -e "${GREEN}INFO:${NC} Snaps removed" | tee -a "$LOGFILE"
+        echo -e "${YELLOW}WARNING:${NC} These snaps are still installed:" | tee -a "$LOGFILE"
         snap list | tee -a "$LOGFILE"
     else
-        echo "ERROR: Failed to remove snaps" | tee -a "$LOGFILE"
+        echo -e "${RED}ERROR:${NC} Failed to remove snaps" | tee -a "$LOGFILE"
         exit 14
     fi
-    # echo "INFO: Removing snapd daemon" | tee -a "$LOGFILE"
+    # echo -e "${GREEN}INFO:${NC} Removing snapd daemon" | tee -a "$LOGFILE"
     # if "$REMOVESNAPDSCRIPT"; then
-    #     echo "INFO: snapd removed" | tee -a "$LOGFILE"
+    #     echo -e "${GREEN}INFO:${NC} snapd removed" | tee -a "$LOGFILE"
     # else
-    #     echo "ERROR: Failed to remove snapd" | tee -a "$LOGFILE"
+    #     echo -e "${RED}ERROR:${NC} Failed to remove snapd" | tee -a "$LOGFILE"
     #     exit 15
     # fi
 }
 
 function recommend_reboot() {
     if [ "$RECOMMENDREBOOT" == "yes" ]; then
-        echo "$REBOOTTEXT" | tee -a "$LOGFILE"
+        echo -e "$REBOOTTEXT" | tee -a "$LOGFILE"
     fi
 }
 
 setup_environment
 if [ "$1" == "check" ]; then
     create_logdir
-    echo "INFO: Check requested" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Check requested" | tee -a "$LOGFILE"
     check_applist
 else
     display_warnings
@@ -400,7 +411,7 @@ generate_remove_snaps_script
 generate_remove_snapd_script
 cleanup
 if [ "$1" == "auto" ]; then
-    echo "INFO: Auto requested" | tee -a "$LOGFILE"
+    echo -e "${GREEN}INFO:${NC} Auto requested" | tee -a "$LOGFILE"
     run_scripts
     recommend_reboot
 fi
-- 
2.45.2

