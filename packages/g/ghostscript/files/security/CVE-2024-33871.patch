From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chris Liddell <chris.liddell@artifex.com>
Date: Fri, 10 May 2024 09:33:30 +0100
Subject: [PATCH 11/11] OPVP device - prevent unsafe parameter change with
 SAFER Bug #707754 "OPVP device - Arbitrary code execution via custom Driver
 library"

The "Driver" parameter for the "opvp"/"oprp" device specifies the name
of a dynamic library and allows any library to be loaded.

The patch does not allow changing this parameter after activating path
control.

This addresses CVE-2024-33871

Backport to ghostpdl 9.53.3
---
 contrib/opvp/gdevopvp.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/contrib/opvp/gdevopvp.c b/contrib/opvp/gdevopvp.c
index 5f20cac7e..895af6205 100644
--- a/contrib/opvp/gdevopvp.c
+++ b/contrib/opvp/gdevopvp.c
@@ -229,7 +229,7 @@ static  int opvp_copy_color(gx_device *, const byte *, int, int,
 static  int _get_params(gx_device*, gs_param_list *);
 static  int opvp_get_params(gx_device *, gs_param_list *);
 static  int oprp_get_params(gx_device *, gs_param_list *);
-static  int _put_params(gx_device*, gs_param_list *);
+static  int _put_params(gx_device *, gs_param_list *);
 static  int opvp_put_params(gx_device *, gs_param_list *);
 static  int oprp_put_params(gx_device *, gs_param_list *);
 static  int opvp_fill_path(gx_device *, const gs_gstate *, gx_path *,
@@ -3456,7 +3456,13 @@ _put_params(gx_device *dev, gs_param_list *plist)
     code = param_read_string(plist, pname, &vdps);
     switch (code) {
     case 0:
-        buff = realloc(buff, vdps.size + 1);
+        if (gs_is_path_control_active(dev->memory)
+            && (!(opdev->globals.vectorDriver) || strlen(opdev->globals.vectorDriver) != vdps.size
+                || memcmp(opdev->globals.vectorDriver, vdps.data, vdps.size) != 0)) {
+            param_signal_error(plist, pname, gs_error_invalidaccess);
+            return_error(gs_error_invalidaccess);
+        }
+        buff = realloc(buff, vdps.size + 1);           buff = realloc(buff, vdps.size + 1);
         memcpy(buff, vdps.data, vdps.size);
         buff[vdps.size] = 0;
         opvp_alloc_string(&(opdev->globals.vectorDriver), buff);
