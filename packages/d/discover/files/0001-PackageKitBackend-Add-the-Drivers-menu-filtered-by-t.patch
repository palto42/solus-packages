From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Fabio Forni <development@redaril.me>
Date: Wed, 5 Jun 2024 15:39:19 -0500
Subject: [PATCH] Allow to install hardware drivers

---
 libdiscover/Category/Category.cpp             | 10 ++++++--
 libdiscover/Category/Category.h               |  8 ++++++-
 libdiscover/appstream/AppStreamUtils.cpp      | 23 +++++++++++--------
 .../backends/KNSBackend/KNSBackend.cpp        | 11 +++++----
 .../AppPackageKitResource.cpp                 | 14 +++++++++++
 .../packagekit-backend-categories.xml         | 22 ++++++++++++++++++
 6 files changed, 71 insertions(+), 17 deletions(-)

diff --git a/libdiscover/Category/Category.cpp b/libdiscover/Category/Category.cpp
index 034b33a4b..a171c7099 100644
--- a/libdiscover/Category/Category.cpp
+++ b/libdiscover/Category/Category.cpp
@@ -62,7 +62,8 @@ Category::Category(const QString &name,
                    const CategoryFilter &filter,
                    const QSet<QString> &pluginName,
                    const QVector<Category *> &subCategories,
-                   bool isAddons)
+                   bool isAddons,
+                   bool isDrivers)
     : QObject(nullptr)
     , m_name(name)
     , m_iconString(iconName)
@@ -70,7 +71,8 @@ Category::Category(const QString &name,
     , m_subCategories(subCategories)
     , m_plugins(pluginName)
     , m_isAddons(isAddons)
-    , m_priority(isAddons ? 5 : 0)
+    , m_isDrivers(isDrivers)
+    , m_priority(isAddons || isDrivers ? 5 : 0)
 {
     setObjectName(m_name);
 
@@ -109,6 +111,10 @@ void Category::parseData(const QString &path, QXmlStreamReader *xml, Localizatio
             m_isAddons = true;
             m_priority = 5;
             xml->readNext();
+        } else if (xml->name() == QLatin1String("Drivers")) {
+            m_isDrivers = true;
+            m_priority = 5;
+            xml->readNext();
         } else if (xml->name() == QLatin1String("Icon")) {
             m_iconString = xml->readElementText();
         } else if (xml->name() == QLatin1String("Include") || xml->name() == QLatin1String("Categories")) {
diff --git a/libdiscover/Category/Category.h b/libdiscover/Category/Category.h
index caa8b4cf3..16d036fc6 100644
--- a/libdiscover/Category/Category.h
+++ b/libdiscover/Category/Category.h
@@ -68,7 +68,8 @@ public:
              const CategoryFilter &filters,
              const QSet<QString> &pluginName,
              const QVector<Category *> &subCategories,
-             bool isAddons);
+             bool isAddons,
+             bool isDrivers);
     ~Category() override;
 
     QString name() const;
@@ -95,6 +96,10 @@ public:
     {
         return m_isAddons;
     }
+    bool isDrivers() const
+    {
+        return m_isDrivers;
+    }
     qint8 priority() const
     {
         return m_priority;
@@ -129,6 +134,7 @@ private:
     CategoryFilter parseIncludes(QXmlStreamReader *xml);
     QSet<QString> m_plugins;
     bool m_isAddons = false;
+    bool m_isDrivers = false;
     qint8 m_priority = 0;
     QTimer *m_subCategoriesChanged;
 };
diff --git a/libdiscover/appstream/AppStreamUtils.cpp b/libdiscover/appstream/AppStreamUtils.cpp
index 65eb17216..7c5b53495 100644
--- a/libdiscover/appstream/AppStreamUtils.cpp
+++ b/libdiscover/appstream/AppStreamUtils.cpp
@@ -7,6 +7,7 @@
 #include "AppStreamUtils.h"
 
 #include "utils.h"
+#include <AppStreamQt/component.h>
 #include <AppStreamQt/pool.h>
 #include <AppStreamQt/release.h>
 #include <AppStreamQt/screenshot.h>
@@ -200,15 +201,19 @@ QCoro::Task<AppStream::ComponentBox> AppStreamUtils::componentsByCategoriesTask(
     }
 
     AppStream::ComponentBox ret(AppStream::ComponentBox::FlagNoChecks);
-    for (const auto &categoryName : cat->involvedCategories()) {
-        // Give the eventloop some breathing room by suspending execution for a bit. This in particular should keep the
-        // UI more responsive while we fetch a substantial amount of components on e.g. the all apps view.
-        constexpr auto arbitrarySuspendTime = 64ms;
-        QTimer timer;
-        timer.start(arbitrarySuspendTime);
-        co_await timer;
-
-        ret += pool->componentsByCategories({categoryName});
+    if (cat->isDrivers()) {
+        ret += pool->componentsByKind(AppStream::Component::KindDriver);
+    } else {
+        for (const auto &categoryName : cat->involvedCategories()) {
+            // Give the eventloop some breathing room by suspending execution for a bit. This in particular should keep the
+            // UI more responsive while we fetch a substantial amount of components on e.g. the all apps view.
+            constexpr auto arbitrarySuspendTime = 64ms;
+            QTimer timer;
+            timer.start(arbitrarySuspendTime);
+            co_await timer;
+
+            ret += pool->componentsByCategories({categoryName});
+        }
     }
     kRemoveDuplicates(ret, kind);
     co_return ret;
diff --git a/libdiscover/backends/KNSBackend/KNSBackend.cpp b/libdiscover/backends/KNSBackend/KNSBackend.cpp
index f1b589d8b..470f9457e 100644
--- a/libdiscover/backends/KNSBackend/KNSBackend.cpp
+++ b/libdiscover/backends/KNSBackend/KNSBackend.cpp
@@ -188,9 +188,9 @@ KNSBackend::KNSBackend(QObject *parent, const QString &iconName, const QString &
         m_categories += cats;
         for (const auto &cat : cats) {
             if (m_hasApplications)
-                categories << new Category(cat, QStringLiteral("applications-other"), {CategoryFilter::CategoryNameFilter, cat}, backendName, {}, true);
+                categories << new Category(cat, QStringLiteral("applications-other"), {CategoryFilter::CategoryNameFilter, cat}, backendName, {}, true, false);
             else
-                categories << new Category(cat, QStringLiteral("plasma"), {CategoryFilter::CategoryNameFilter, cat}, backendName, {}, true);
+                categories << new Category(cat, QStringLiteral("plasma"), {CategoryFilter::CategoryNameFilter, cat}, backendName, {}, true, false);
         }
     }
 
@@ -224,12 +224,13 @@ KNSBackend::KNSBackend(QObject *parent, const QString &iconName, const QString &
     m_engine->init(m_name);
 
     if (m_hasApplications) {
-        auto actualCategory = new Category(m_displayName, QStringLiteral("applications-other"), filter, backendName, topCategories, false);
+        auto actualCategory = new Category(m_displayName, QStringLiteral("applications-other"), filter, backendName, topCategories, false, false);
         auto applicationCategory = new Category(i18n("Applications"), //
                                                 QStringLiteral("applications-internet"),
                                                 filter,
                                                 backendName,
                                                 {actualCategory},
+                                                false,
                                                 false);
         const QVector<CategoryFilter> filters = {{CategoryFilter::CategoryNameFilter, QLatin1String("Application")}, filter};
         applicationCategory->setFilter({CategoryFilter::AndFilter, filters});
@@ -268,11 +269,11 @@ KNSBackend::KNSBackend(QObject *parent, const QString &iconName, const QString &
             QStringLiteral("ksplash.knsrc"),       QStringLiteral("window-decorations.knsrc"),
         };
         const auto iconName = knsrcPlasma.contains(fileName) ? QStringLiteral("plasma") : QStringLiteral("applications-other");
-        auto actualCategory = new Category(m_displayName, iconName, filter, backendName, categories, true);
+        auto actualCategory = new Category(m_displayName, iconName, filter, backendName, categories, true, false);
         actualCategory->setParent(this);
 
         const auto topLevelName = knsrcPlasma.contains(fileName) ? i18n("Plasma Addons") : i18n("Application Addons");
-        auto addonsCategory = new Category(topLevelName, iconName, filter, backendName, {actualCategory}, true);
+        auto addonsCategory = new Category(topLevelName, iconName, filter, backendName, {actualCategory}, true, false);
         m_rootCategories = {addonsCategory};
     }
 
diff --git a/libdiscover/backends/PackageKitBackend/AppPackageKitResource.cpp b/libdiscover/backends/PackageKitBackend/AppPackageKitResource.cpp
index a6de172aa..4bbc37242 100644
--- a/libdiscover/backends/PackageKitBackend/AppPackageKitResource.cpp
+++ b/libdiscover/backends/PackageKitBackend/AppPackageKitResource.cpp
@@ -11,6 +11,7 @@
 #include <AppStreamQt/image.h>
 #include <AppStreamQt/release.h>
 #include <AppStreamQt/screenshot.h>
+#include <AppStreamQt/systeminfo.h>
 #include <AppStreamQt/version.h>
 #include <KLocalizedString>
 #include <KService>
@@ -23,6 +24,7 @@
 #include <QStandardPaths>
 #include <QUrlQuery>
 #include <appstream/AppStreamUtils.h>
+#include <qstringliteral.h>
 
 using namespace Qt::StringLiterals;
 
@@ -114,6 +116,18 @@ QStringList AppPackageKitResource::mimetypes() const
 
 static constexpr auto s_addonKinds = {AppStream::Component::KindAddon, AppStream::Component::KindCodec};
 
+static bool hasDeviceModaliases(const AppStream::Component &comp)
+{
+    const auto mods = comp.provided(AppStream::Provided::KindModalias);
+    auto sys = AppStream::SystemInfo();
+    for (const auto &mod : mods.items()) {
+        if (sys.hasDeviceMatchingModalias(mod)) {
+            return true;
+        }
+    }
+    return false;
+}
+
 bool AppPackageKitResource::hasCategory(const QString &category) const
 {
     if (m_appdata.kind() != AppStream::Component::KindAddon && category == QStringLiteral("Application"))
diff --git a/libdiscover/backends/PackageKitBackend/packagekit-backend-categories.xml b/libdiscover/backends/PackageKitBackend/packagekit-backend-categories.xml
index 68c8299e1..f8833616e 100644
--- a/libdiscover/backends/PackageKitBackend/packagekit-backend-categories.xml
+++ b/libdiscover/backends/PackageKitBackend/packagekit-backend-categories.xml
@@ -552,6 +552,28 @@
       </Or>
     </Include>
   </Menu>
+
+  <Menu>
+    <Name>Hardware Drivers</Name>
+    <Icon>computer-laptop-symbolic</Icon>
+    <Drivers />
+    <Include>
+      <And>
+        <Category>Drivers</Category>
+      </And>
+    </Include>
+    <Menu>
+      <Name>Drivers For This Device</Name>
+      <Icon>computer-laptop-symbolic</Icon>
+      <Drivers />
+      <Include>
+        <And>
+          <Category>CompatibleDrivers</Category>
+        </And>
+      </Include>
+    </Menu>
+  </Menu>
+
   <Menu>
     <Name>Plasma Addons</Name>
     <Icon>plasma</Icon>
