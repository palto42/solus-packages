From 8bd6ebacea4995c9121791fe5b207e9f9424c323 Mon Sep 17 00:00:00 2001
From: Kenneth Moreland <morelandkd@ornl.gov>
Date: Fri, 25 Oct 2024 08:31:54 -0400
Subject: [PATCH] Fix clang compile issue with a missing tempolate arg list

Apparently, starting with LLVM clang version 20, if you use the `template`
keyword to highlight a sub-element, you have to provide a template argument
list. This is true even for a method where the template arguments can be
completely determined by the types of the arguments. Fix this problem by
providing an empty template arg list (so the compiler knows what is
templated but still figures out its own types).

Fixes #830
---
 docs/changelog/missing-template-arg-list.md | 10 ++++++++++
 vtkm/internal/VariantImplDetail.h           |  2 +-
 vtkm/internal/VariantImplDetail.h.in        |  2 +-
 3 files changed, 12 insertions(+), 2 deletions(-)
 create mode 100644 docs/changelog/missing-template-arg-list.md

diff --git a/docs/changelog/missing-template-arg-list.md b/docs/changelog/missing-template-arg-list.md
new file mode 100644
index 000000000..6f7da3d46
--- /dev/null
+++ b/docs/changelog/missing-template-arg-list.md
@@ -0,0 +1,10 @@
+## Fix clang compile issue with a missing tempolate arg list
+
+Apparently, starting with LLVM clang version 20, if you use the `template`
+keyword to highlight a sub-element, you have to provide a template argument
+list. This is true even for a method where the template arguments can be
+completely determined by the types of the arguments. Fix this problem by
+providing an empty template arg list (so the compiler knows what is
+templated but still figures out its own types).
+
+Fixes #830
diff --git a/vtkm/internal/VariantImplDetail.h b/vtkm/internal/VariantImplDetail.h
index 896c75ed5..0bed844ae 100644
--- a/vtkm/internal/VariantImplDetail.h
+++ b/vtkm/internal/VariantImplDetail.h
@@ -548,7 +548,7 @@ struct VariantCases
         // just the one that it currently holds.
         return f(storage.V7, std::forward<Args>(args)...);
       default:
-        return VariantCases<NumCases - 8>::template CastAndCall(
+        return VariantCases<NumCases - 8>::template CastAndCall<>(
           index - 8, std::forward<Functor>(f), storage.Remaining, std::forward<Args>(args)...);
     }
   }
diff --git a/vtkm/internal/VariantImplDetail.h.in b/vtkm/internal/VariantImplDetail.h.in
index 546cde5fb..419a6f630 100644
--- a/vtkm/internal/VariantImplDetail.h.in
+++ b/vtkm/internal/VariantImplDetail.h.in
@@ -273,7 +273,7 @@ $for(param_index in range(max_expanded))\
         return f(storage.V$(param_index), std::forward<Args>(args)...);
 $endfor\
       default:
-        return VariantCases<NumCases - $(max_expanded)>::template CastAndCall(
+        return VariantCases<NumCases - $(max_expanded)>::template CastAndCall<>(
           index - $(max_expanded), std::forward<Functor>(f), storage.Remaining, std::forward<Args>(args)...);
     }
   }
-- 
GitLab

