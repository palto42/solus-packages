From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicholas Wilson <iamthewilsonator@hotmail.com>
Date: Tue, 13 Aug 2024 08:41:58 +0800
Subject: [PATCH 01/11] Fix some compilation errors for LLVM19/20

---
 gen/dibuilder.cpp                      | 6 +++++-
 gen/optimizer.cpp                      | 9 +++++++++
 runtime/druntime/src/ldc/intrinsics.di | 2 ++
 3 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/gen/dibuilder.cpp b/gen/dibuilder.cpp
index 106291ae0..f93656a11 100644
--- a/gen/dibuilder.cpp
+++ b/gen/dibuilder.cpp
@@ -1139,7 +1139,11 @@ void DIBuilder::EmitValue(llvm::Value *val, VarDeclaration *vd) {
 
   llvm::Instruction *instr = DBuilder.insertDbgValueIntrinsic(
       val, debugVariable, DBuilder.createExpression(),
-      IR->ir->getCurrentDebugLocation(), IR->scopebb());
+      IR->ir->getCurrentDebugLocation(), IR->scopebb())
+#if LDC_LLVM_VER >= 1901
+  .dyn_cast<llvm::Instruction *>()
+#endif
+    ;
   instr->setDebugLoc(IR->ir->getCurrentDebugLocation());
 }
 
diff --git a/gen/optimizer.cpp b/gen/optimizer.cpp
index 76b37eb11..74312c5c0 100644
--- a/gen/optimizer.cpp
+++ b/gen/optimizer.cpp
@@ -308,6 +308,9 @@ static llvm::Optional<PGOOptions> getPGOOptions() {
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::IRInstr, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1901
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   } else if (opts::isUsingIRBasedPGOProfile()) {
     return PGOOptions(
@@ -316,6 +319,9 @@ static llvm::Optional<PGOOptions> getPGOOptions() {
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::IRUse, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1901
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   } else if (opts::isUsingSampleBasedPGOProfile()) {
     return PGOOptions(
@@ -324,6 +330,9 @@ static llvm::Optional<PGOOptions> getPGOOptions() {
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::SampleUse, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1901
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   }
 #if LDC_LLVM_VER < 1600
diff --git a/runtime/druntime/src/ldc/intrinsics.di b/runtime/druntime/src/ldc/intrinsics.di
index 485ffc8c4..ab73a8073 100644
--- a/runtime/druntime/src/ldc/intrinsics.di
+++ b/runtime/druntime/src/ldc/intrinsics.di
@@ -24,6 +24,8 @@ else version (LDC_LLVM_1600) enum LLVM_version = 1600;
 else version (LDC_LLVM_1700) enum LLVM_version = 1700;
 else version (LDC_LLVM_1800) enum LLVM_version = 1800;
 else version (LDC_LLVM_1801) enum LLVM_version = 1801;
+else version (LDC_LLVM_1901) enum LLVM_version = 1901;
+else version (LDC_LLVM_2000) enum LLVM_version = 2000;
 else static assert(false, "LDC LLVM version not supported");
 
 enum LLVM_atleast(int major) = (LLVM_version >= major * 100);
