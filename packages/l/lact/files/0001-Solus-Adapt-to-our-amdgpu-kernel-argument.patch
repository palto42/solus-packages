Adapt to our amdgpu kernel argument
diff --git a/lact-client/src/lib.rs b/lact-client/src/lib.rs
index dfc2b66..03a4c8f 100644
--- a/lact-client/src/lib.rs
+++ b/lact-client/src/lib.rs
@@ -122,8 +122,6 @@ impl DaemonClient {
     }
 
     request_plain!(get_system_info, SystemInfo, SystemInfo);
-    request_plain!(enable_overdrive, EnableOverdrive, String);
-    request_plain!(disable_overdrive, DisableOverdrive, String);
     request_plain!(generate_debug_snapshot, GenerateSnapshot, String);
     request_plain!(reset_config, RestConfig, ());
     request_with_id!(get_device_info, DeviceInfo, DeviceInfo);
diff --git a/lact-daemon/src/server.rs b/lact-daemon/src/server.rs
index aafca8b..bef790d 100644
--- a/lact-daemon/src/server.rs
+++ b/lact-daemon/src/server.rs
@@ -191,8 +191,6 @@ async fn handle_request<'a>(request: Request<'a>, handler: &'a Handler) -> anyho
         Request::SetGpuConfig { id, config } => {
             ok_response(handler.set_gpu_config(id, config).await?)
         }
-        Request::EnableOverdrive => ok_response(system::enable_overdrive().await?),
-        Request::DisableOverdrive => ok_response(system::disable_overdrive().await?),
         Request::GenerateSnapshot => ok_response(handler.generate_snapshot().await?),
         Request::ConfirmPendingConfig(command) => {
             ok_response(handler.confirm_pending_config(command)?)
diff --git a/lact-daemon/src/server/system.rs b/lact-daemon/src/server/system.rs
index d789fd0..66b4d57 100644
--- a/lact-daemon/src/server/system.rs
+++ b/lact-daemon/src/server/system.rs
@@ -20,6 +20,7 @@ static OC_TOGGLED: AtomicBool = AtomicBool::new(false);
 const PP_OVERDRIVE_MASK: u64 = 0x4000;
 pub const PP_FEATURE_MASK_PATH: &str = "/sys/module/amdgpu/parameters/ppfeaturemask";
 pub const MODULE_CONF_PATH: &str = "/etc/modprobe.d/99-amdgpu-overdrive.conf";
+pub const OVERDRIVE_ENABLED_PATH: &str = "/sys/module/amdgpu/parameters/overdrive_enabled";
 pub const DAEMON_VERSION: &str = env!("CARGO_PKG_VERSION");
 
 pub async fn info() -> anyhow::Result<SystemInfo> {
@@ -41,8 +42,10 @@ pub async fn info() -> anyhow::Result<SystemInfo> {
         .trim()
         .to_owned();
 
-    let amdgpu_overdrive_enabled = if let Ok(mask) = read_current_mask() {
-        Some((mask & PP_OVERDRIVE_MASK) > 0)
+     let amdgpu_overdrive_enabled = if let Ok(true) = is_overdrive_enabled_flag() {
+        Some(true)
+    } else if let Ok(mask) = read_current_mask() {
+    	Some((mask & PP_OVERDRIVE_MASK) > 0)
     } else {
         None
     };
@@ -56,63 +59,6 @@ pub async fn info() -> anyhow::Result<SystemInfo> {
     })
 }
 
-pub async fn enable_overdrive() -> anyhow::Result<String> {
-    ensure!(
-        !OC_TOGGLED.load(Ordering::SeqCst),
-        "Overdrive support was already toggled - please reboot to apply the changes"
-    );
-
-    let current_mask = read_current_mask()?;
-
-    let new_mask = current_mask | PP_OVERDRIVE_MASK;
-    if new_mask == current_mask {
-        return Err(anyhow!("Overdrive mask already enabled"));
-    }
-
-    let conf = format!("options amdgpu ppfeaturemask=0x{new_mask:X}");
-
-    let mut file = File::create(MODULE_CONF_PATH).context("Could not open module conf file")?;
-    file.set_permissions(Permissions::from_mode(0o644))
-        .context("Could not conf file permissions")?;
-
-    file.write_all(conf.as_bytes())
-        .context("Could not write config")?;
-
-    let message = match regenerate_initramfs().await {
-        Ok(initramfs_type) => {
-            OC_TOGGLED.store(true, Ordering::SeqCst);
-            format!("Initramfs was successfully regenerated (detected type {initramfs_type:?})")
-        }
-        Err(err) => format!("{err:#}"),
-    };
-
-    Ok(message)
-}
-
-pub async fn disable_overdrive() -> anyhow::Result<String> {
-    ensure!(
-        !OC_TOGGLED.load(Ordering::SeqCst),
-        "Overdrive support was already toggled - please reboot to apply the changes"
-    );
-
-    if Path::new(MODULE_CONF_PATH).exists() {
-        fs::remove_file(MODULE_CONF_PATH).context("Could not remove module config file")?;
-        match regenerate_initramfs().await {
-            Ok(initramfs_type) => {
-                OC_TOGGLED.store(true, Ordering::SeqCst);
-                Ok(format!(
-                    "Initramfs was successfully regenerated (detected type {initramfs_type:?})"
-                ))
-            }
-            Err(err) => Ok(format!("{err:#}")),
-        }
-    } else {
-        Err(anyhow!(
-            "Overclocking was not enabled through LACT (file at {MODULE_CONF_PATH} does not exist)"
-        ))
-    }
-}
-
 fn read_current_mask() -> anyhow::Result<u64> {
     let ppfeaturemask = fs::read_to_string(PP_FEATURE_MASK_PATH)?;
     let ppfeaturemask = ppfeaturemask
@@ -123,23 +69,13 @@ fn read_current_mask() -> anyhow::Result<u64> {
     u64::from_str_radix(ppfeaturemask, 16).context("Invalid ppfeaturemask")
 }
 
-async fn regenerate_initramfs() -> anyhow::Result<InitramfsType> {
-    let os_release = OS_RELEASE.as_ref().context("Could not detect distro")?;
-    match detect_initramfs_type(os_release).await {
-        Some(initramfs_type) => {
-            info!("Detected initramfs type {initramfs_type:?}, regenerating");
-            let result = match initramfs_type {
-                InitramfsType::Debian => run_command("update-initramfs", &["-u"]).await,
-                InitramfsType::Mkinitcpio => run_command("mkinitcpio", &["-P"]).await,
-                InitramfsType::Dracut => {
-                    run_command("dracut", &["--regenerate-all", "--force"]).await
-                }
-            };
-            result.map(|()| initramfs_type)
-        }
-        None => Err(anyhow!(
-            "Distro is not in the known configuration list, manually setting the overclocking option might be required. See the overclocking section on LACT's GitHub page for more information."
-        )),
+fn is_overdrive_enabled_flag() -> anyhow::Result<bool> {
+    let overdrive_enabled = fs::read_to_string(OVERDRIVE_ENABLED_PATH)?;
+
+    if overdrive_enabled.trim() != "0" {
+        Ok(true)
+    } else {
+        Ok(false)
     }
 }
 
diff --git a/lact-gui/src/app.rs b/lact-gui/src/app.rs
index d73c9a7..782dcf3 100644
--- a/lact-gui/src/app.rs
+++ b/lact-gui/src/app.rs
@@ -372,12 +372,6 @@ impl AppModel {
             AppMsg::DebugSnapshot => {
                 self.generate_debug_snapshot(root).await;
             }
-            AppMsg::EnableOverdrive => {
-                toggle_overdrive(&self.daemon_client, true, root.clone()).await;
-            }
-            AppMsg::DisableOverdrive => {
-                toggle_overdrive(&self.daemon_client, false, root.clone()).await;
-            }
             AppMsg::ResetConfig => {
                 self.daemon_client.reset_config().await?;
                 sender.input(AppMsg::ReloadData { full: true });
@@ -952,26 +946,6 @@ fn confirmation_text(seconds_left: u64) -> String {
     format!("Do you want to keep the new settings? (Reverting in {seconds_left} seconds)")
 }
 
-async fn toggle_overdrive(daemon_client: &DaemonClient, enable: bool, root: ApplicationWindow) {
-    let dialog = spinner_dialog(&root, "Regenerating initramfs (this may take a while)");
-    dialog.show();
-
-    let result = if enable {
-        daemon_client.enable_overdrive().await
-    } else {
-        daemon_client.disable_overdrive().await
-    };
-
-    dialog.hide();
-
-    match result {
-        Ok(msg) => oc_toggled_dialog(enable, &msg),
-        Err(err) => {
-            show_error(&root, &err);
-        }
-    }
-}
-
 fn spinner_dialog(parent: &ApplicationWindow, title: &str) -> MessageDialog {
     let spinner = gtk::Spinner::new();
     spinner.start();
@@ -1012,15 +986,6 @@ fn register_actions(sender: &AsyncComponentSender<AppModel>) {
         (ShowGraphsWindow, AppMsg::ShowGraphsWindow),
         (DumpVBios, AppMsg::DumpVBios),
         (DebugSnapshot, AppMsg::DebugSnapshot),
-        (
-            DisableOverdrive,
-            AppMsg::ask_confirmation(
-                AppMsg::DisableOverdrive,
-                "Disable Overclocking",
-                "This will disable AMD overclocking support (overdrive) on next reboot.",
-                gtk::ButtonsType::OkCancel,
-            )
-        ),
         (
             ResetConfig,
             AppMsg::ask_confirmation(
@@ -1039,7 +1004,6 @@ relm4::new_action_group!(AppActionGroup, "app");
 relm4::new_stateless_action!(ShowGraphsWindow, AppActionGroup, "show-graphs-window");
 relm4::new_stateless_action!(DumpVBios, AppActionGroup, "dump-vbios");
 relm4::new_stateless_action!(DebugSnapshot, AppActionGroup, "generate-debug-snapshot");
-relm4::new_stateless_action!(DisableOverdrive, AppActionGroup, "disable-overdrive");
 relm4::new_stateless_action!(ResetConfig, AppActionGroup, "reset-config");
 
 async fn create_connection() -> anyhow::Result<(DaemonClient, Option<anyhow::Error>)> {
diff --git a/lact-gui/src/app/header.rs b/lact-gui/src/app/header.rs
index 055d39d..f37ce14 100644
--- a/lact-gui/src/app/header.rs
+++ b/lact-gui/src/app/header.rs
@@ -4,7 +4,7 @@ pub mod profile_rule_window;
 
 use crate::{app::APP_BROKER, CONFIG};
 
-use super::{AppMsg, DebugSnapshot, DisableOverdrive, DumpVBios, ResetConfig, ShowGraphsWindow};
+use super::{AppMsg, DebugSnapshot, DumpVBios, ResetConfig, ShowGraphsWindow};
 use glib::clone;
 use gtk::prelude::*;
 use gtk::*;
@@ -147,7 +147,6 @@ impl Component for Header {
                 "Dump VBIOS" => DumpVBios,
             } ,
             section! {
-                "Disable AMD overclocking support" => DisableOverdrive,
                 "Reset all configuration" => ResetConfig,
             }
         }
diff --git a/lact-gui/src/app/msg.rs b/lact-gui/src/app/msg.rs
index aa611b2..e433bb0 100644
--- a/lact-gui/src/app/msg.rs
+++ b/lact-gui/src/app/msg.rs
@@ -18,8 +18,6 @@ pub enum AppMsg {
     ShowGraphsWindow,
     DumpVBios,
     DebugSnapshot,
-    EnableOverdrive,
-    DisableOverdrive,
     ResetConfig,
     ReloadProfiles {
         include_state: bool,
diff --git a/lact-gui/src/app/pages/oc_page.rs b/lact-gui/src/app/pages/oc_page.rs
index 27f8724..4056ffb 100644
--- a/lact-gui/src/app/pages/oc_page.rs
+++ b/lact-gui/src/app/pages/oc_page.rs
@@ -23,8 +23,8 @@ use power_states::power_states_frame::{PowerStatesFrame, PowerStatesFrameMsg};
 use relm4::{ComponentController, ComponentParts, ComponentSender, RelmWidgetExt};
 use std::{collections::HashMap, sync::Arc};
 
-const OVERCLOCKING_DISABLED_TEXT: &str = "AMD Overclocking support is not enabled! \
-You can still change basic settings, but the more advanced clocks and voltage control will not be available.";
+const OVERCLOCKING_DISABLED_TEXT: &str = "Solus users note: Please ensure that you have rebooted after installing LACT for the first time \
+If this message still appears please ensure that you are using at least kernel 6.11..";
 
 pub struct OcPage {
     stats_section: relm4::Controller<GpuStatsSection>,
@@ -77,20 +77,6 @@ impl relm4::Component for OcPage {
                             set_wrap: true,
                             set_wrap_mode: pango::WrapMode::Word,
                         },
-
-                        gtk::Button {
-                            set_label: "Enable AMD Overclocking",
-                            set_halign: gtk::Align::End,
-
-                            connect_clicked[sender] => move |_| {
-                                sender.output(AppMsg::ask_confirmation(
-                                    AppMsg::EnableOverdrive,
-                                    "Enable AMD Overclocking",
-                                    format!("This will enable the overdrive feature of the amdgpu driver by creating a file at <b>{MODULE_CONF_PATH}</b> and updating the initramfs. Are you sure you want to do this?"),
-                                    gtk::ButtonsType::OkCancel,
-                                )).expect("Channel closed");
-                            }
-                        },
                     },
                 },
 
diff --git a/lact-schema/src/request.rs b/lact-schema/src/request.rs
index ae33a17..33af003 100644
--- a/lact-schema/src/request.rs
+++ b/lact-schema/src/request.rs
@@ -93,8 +93,6 @@ pub enum Request<'a> {
         id: &'a str,
         config: GpuConfig,
     },
-    EnableOverdrive,
-    DisableOverdrive,
     GenerateSnapshot,
     ConfirmPendingConfig(ConfirmCommand),
     RestConfig,
