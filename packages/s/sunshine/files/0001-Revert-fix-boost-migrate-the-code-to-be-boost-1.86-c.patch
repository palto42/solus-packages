From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Thu, 17 Apr 2025 16:27:03 -0500
Subject: [PATCH] Revert "fix(boost): migrate the code to be boost 1.86
 compatible"

This reverts commit dfb1f1af4ca3e3e03b03f1ab7438a41d70f4be06.
---
 cmake/dependencies/Boost_Sunshine.cmake |  8 ++++----
 src/platform/common.h                   |  8 ++++----
 src/platform/linux/misc.cpp             |  4 ++--
 src/platform/macos/misc.mm              |  6 ++++--
 src/platform/windows/display_base.cpp   |  5 ++---
 src/platform/windows/misc.cpp           |  7 ++++---
 src/process.cpp                         | 15 +++++++++------
 src/process.h                           | 17 ++++++++---------
 src/system_tray.cpp                     |  2 +-
 9 files changed, 38 insertions(+), 34 deletions(-)

diff --git a/cmake/dependencies/Boost_Sunshine.cmake b/cmake/dependencies/Boost_Sunshine.cmake
index 72ab544..4438fb2 100644
--- a/cmake/dependencies/Boost_Sunshine.cmake
+++ b/cmake/dependencies/Boost_Sunshine.cmake
@@ -3,7 +3,7 @@
 #
 include_guard(GLOBAL)
 
-set(BOOST_VERSION 1.86)
+set(BOOST_VERSION 1.83)
 set(BOOST_COMPONENTS
         filesystem
         locale
@@ -15,7 +15,7 @@ if(BOOST_USE_STATIC)
     set(Boost_USE_STATIC_LIBS ON)  # cmake-lint: disable=C0103
 endif()
 
-find_package(Boost CONFIG ${BOOST_VERSION} COMPONENTS ${BOOST_COMPONENTS})
+find_package(Boost ${BOOST_VERSION} COMPONENTS ${BOOST_COMPONENTS})
 if(NOT Boost_FOUND)
     message(STATUS "Boost v${BOOST_VERSION}.x package not found in the system. Falling back to FetchContent.")
     include(FetchContent)
@@ -39,9 +39,9 @@ if(NOT Boost_FOUND)
     set(BOOST_INCLUDE_LIBRARIES
             ${BOOST_COMPONENTS})
     set(BOOST_URL
-            "https://github.com/boostorg/boost/releases/download/boost-1.86.0/boost-1.86.0-cmake.tar.xz")
+            "https://github.com/boostorg/boost/releases/download/boost-1.85.0/boost-1.85.0-cmake.tar.xz")
     set(BOOST_HASH
-            "MD5=D02759931CEDC02ADED80402906C5EB6")
+            "MD5=BADEA970931766604D4D5F8F4090B176")
 
     if(CMAKE_VERSION VERSION_LESS "3.24.0")
         FetchContent_Declare(
diff --git a/src/platform/common.h b/src/platform/common.h
index 49d1fc7..8e0ceaf 100644
--- a/src/platform/common.h
+++ b/src/platform/common.h
@@ -51,14 +51,13 @@ namespace boost {
   namespace filesystem {
     class path;
   }
-
-  namespace process::inline v1 {
+  namespace process {
     class child;
     class group;
     template<typename Char>
     class basic_environment;
     typedef basic_environment<char> environment;
-  }  // namespace process::inline v1
+  }  // namespace process
 }  // namespace boost
 #endif
 namespace video {
@@ -582,7 +581,8 @@ namespace platf {
    */
   bool needs_encoder_reenumeration();
 
-  boost::process::v1::child run_command(bool elevated, bool interactive, const std::string &cmd, boost::filesystem::path &working_dir, const boost::process::v1::environment &env, FILE *file, std::error_code &ec, boost::process::v1::group *group);
+  boost::process::child
+  run_command(bool elevated, bool interactive, const std::string &cmd, boost::filesystem::path &working_dir, const boost::process::environment &env, FILE *file, std::error_code &ec, boost::process::group *group);
 
   enum class thread_priority_e : int {
     low,  ///< Low priority
diff --git a/src/platform/linux/misc.cpp b/src/platform/linux/misc.cpp
index 81c08ed..728d4a6 100644
--- a/src/platform/linux/misc.cpp
+++ b/src/platform/linux/misc.cpp
@@ -22,7 +22,7 @@
 // lib includes
 #include <boost/asio/ip/address.hpp>
 #include <boost/asio/ip/host_name.hpp>
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>
 #include <fcntl.h>
 #include <unistd.h>
 
@@ -259,7 +259,7 @@ namespace platf {
     auto working_dir = boost::filesystem::path(std::getenv("HOME"));
     std::string cmd = R"(xdg-open ")" + url + R"(")";
 
-    boost::process::v1::environment _env = boost::this_process::environment();
+    boost::process::environment _env = boost::this_process::environment();
     std::error_code ec;
     auto child = run_command(false, false, cmd, working_dir, _env, nullptr, ec, nullptr);
     if (ec) {
diff --git a/src/platform/macos/misc.mm b/src/platform/macos/misc.mm
index 540dd74..b777515 100644
--- a/src/platform/macos/misc.mm
+++ b/src/platform/macos/misc.mm
@@ -23,7 +23,6 @@
 // lib includes
 #include <boost/asio/ip/address.hpp>
 #include <boost/asio/ip/host_name.hpp>
-#include <boost/process/v1.hpp>
 
 // local includes
 #include "misc.h"
@@ -31,6 +30,9 @@
 #include "src/logging.h"
 #include "src/platform/common.h"
 
+#include <boost/asio/ip/address.hpp>
+#include <boost/process.hpp>
+
 using namespace std::literals;
 namespace fs = std::filesystem;
 namespace bp = boost::process;
@@ -199,7 +201,7 @@ namespace platf {
     boost::filesystem::path working_dir;
     std::string cmd = R"(open ")" + url + R"(")";
 
-    boost::process::v1::environment _env = boost::this_process::environment();
+    boost::process::environment _env = boost::this_process::environment();
     std::error_code ec;
     auto child = run_command(false, false, cmd, working_dir, _env, nullptr, ec, nullptr);
     if (ec) {
diff --git a/src/platform/windows/display_base.cpp b/src/platform/windows/display_base.cpp
index 6698566..b1fbfc1 100644
--- a/src/platform/windows/display_base.cpp
+++ b/src/platform/windows/display_base.cpp
@@ -11,10 +11,9 @@
 
 // lib includes
 #include <boost/algorithm/string/join.hpp>
-#include <boost/process/v1.hpp>
-#include <MinHook.h>
+#include <boost/process.hpp>
 
-// We have to include boost/process/v1.hpp before display.h due to WinSock.h,
+// We have to include boost/process.hpp before display.h due to WinSock.h,
 // but that prevents the definition of NTSTATUS so we must define it ourself.
 typedef long NTSTATUS;
 
diff --git a/src/platform/windows/misc.cpp b/src/platform/windows/misc.cpp
index c931b0a..e84b86f 100644
--- a/src/platform/windows/misc.cpp
+++ b/src/platform/windows/misc.cpp
@@ -13,7 +13,7 @@
 // lib includes
 #include <boost/algorithm/string.hpp>
 #include <boost/asio/ip/address.hpp>
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>
 #include <boost/program_options/parsers.hpp>
 
 // prevent clang format from "optimizing" the header include order
@@ -1007,8 +1007,9 @@ namespace platf {
    * @brief Open a url in the default web browser.
    * @param url The url to open.
    */
-  void open_url(const std::string &url) {
-    boost::process::v1::environment _env = boost::this_process::environment();
+  void
+  open_url(const std::string &url) {
+    boost::process::environment _env = boost::this_process::environment();
     auto working_dir = boost::filesystem::path();
     std::error_code ec;
 
diff --git a/src/process.cpp b/src/process.cpp
index c009fda..d72fb8c 100644
--- a/src/process.cpp
+++ b/src/process.cpp
@@ -57,7 +57,8 @@ namespace proc {
     return std::make_unique<deinit_t>();
   }
 
-  void terminate_process_group(boost::process::v1::child &proc, boost::process::v1::group &group, std::chrono::seconds exit_timeout) {
+  void
+  terminate_process_group(boost::process::child &proc, boost::process::group &group, std::chrono::seconds exit_timeout) {
     if (group.valid() && platf::process_group_running((std::uintptr_t) group.native_handle())) {
       if (exit_timeout.count() > 0) {
         // Request processes in the group to exit gracefully
@@ -95,7 +96,8 @@ namespace proc {
     }
   }
 
-  boost::filesystem::path find_working_directory(const std::string &cmd, boost::process::v1::environment &env) {
+  boost::filesystem::path
+  find_working_directory(const std::string &cmd, boost::process::environment &env) {
     // Parse the raw command string into parts to get the actual command portion
 #ifdef _WIN32
     auto parts = boost::program_options::split_winmain(cmd);
@@ -117,7 +119,7 @@ namespace proc {
     // If the cmd path is not an absolute path, resolve it using our PATH variable
     boost::filesystem::path cmd_path(parts.at(0));
     if (!cmd_path.is_absolute()) {
-      cmd_path = boost::process::v1::search_path(parts.at(0));
+      cmd_path = boost::process::search_path(parts.at(0));
       if (cmd_path.empty()) {
         BOOST_LOG(error) << "Unable to find executable ["sv << parts.at(0) << "]. Is it in your PATH?"sv;
         return boost::filesystem::path();
@@ -300,8 +302,8 @@ namespace proc {
     std::error_code ec;
     placebo = false;
     terminate_process_group(_process, _process_group, _app.exit_timeout);
-    _process = boost::process::v1::child();
-    _process_group = boost::process::v1::group();
+    _process = boost::process::child();
+    _process_group = boost::process::group();
 
     for (; _app_prep_it != _app_prep_begin; --_app_prep_it) {
       auto &cmd = *(_app_prep_it - 1);
@@ -400,7 +402,8 @@ namespace proc {
     return begin;
   }
 
-  std::string parse_env_val(boost::process::v1::native_environment &env, const std::string_view &val_raw) {
+  std::string
+  parse_env_val(boost::process::native_environment &env, const std::string_view &val_raw) {
     auto pos = std::begin(val_raw);
     auto dollar = std::find(pos, std::end(val_raw), '$');
 
diff --git a/src/process.h b/src/process.h
index f5a81e9..3649cb0 100644
--- a/src/process.h
+++ b/src/process.h
@@ -12,8 +12,7 @@
 #include <optional>
 #include <unordered_map>
 
-// lib includes
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>
 
 // local includes
 #include "config.h"
@@ -72,9 +71,8 @@ namespace proc {
     KITTY_DEFAULT_CONSTR_MOVE_THROW(proc_t)
 
     proc_t(
-      boost::process::v1::environment &&env,
-      std::vector<ctx_t> &&apps
-    ):
+      boost::process::environment &&env,
+      std::vector<ctx_t> &&apps):
         _app_id(0),
         _env(std::move(env)),
         _apps(std::move(apps)) {
@@ -98,7 +96,7 @@ namespace proc {
   private:
     int _app_id;
 
-    boost::process::v1::environment _env;
+    boost::process::environment _env;
     std::vector<ctx_t> _apps;
     ctx_t _app;
     std::chrono::steady_clock::time_point _app_launch_time;
@@ -106,8 +104,8 @@ namespace proc {
     // If no command associated with _app_id, yet it's still running
     bool placebo {};
 
-    boost::process::v1::child _process;
-    boost::process::v1::group _process_group;
+    boost::process::child _process;
+    boost::process::group _process_group;
 
     file_t _pipe;
     std::vector<cmd_t>::const_iterator _app_prep_it;
@@ -136,7 +134,8 @@ namespace proc {
    * @param group The group of all children in the process tree.
    * @param exit_timeout The timeout to wait for the process group to gracefully exit.
    */
-  void terminate_process_group(boost::process::v1::child &proc, boost::process::v1::group &group, std::chrono::seconds exit_timeout);
+  void
+  terminate_process_group(boost::process::child &proc, boost::process::group &group, std::chrono::seconds exit_timeout);
 
   extern proc_t proc;
 }  // namespace proc
diff --git a/src/system_tray.cpp b/src/system_tray.cpp
index 621a809..334aaa4 100644
--- a/src/system_tray.cpp
+++ b/src/system_tray.cpp
@@ -32,7 +32,7 @@
 
   // lib includes
   #include <boost/filesystem.hpp>
-  #include <boost/process/v1/environment.hpp>
+  #include <boost/process/environment.hpp>
   #include <tray/src/tray.h>
 
   // local includes
