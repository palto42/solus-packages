From 86c76884e1a0c21531ccac4d79a05e68a7d79d6a Mon Sep 17 00:00:00 2001
From: Earl Chew <earl_chew@yahoo.com>
Date: Sun, 17 Dec 2023 08:37:33 -0800
Subject: [PATCH 1/3] Augment library_flags() to return libraries

Extend library_flags() to return the libraries provided by
pkg-config --libs.

Signed-off-by: Earl Chew <earl_chew@yahoo.com>
---
 buildtools/wafsamba/samba3.py         |  8 ++++----
 buildtools/wafsamba/samba_autoconf.py | 22 +++++++++++++---------
 buildtools/wafsamba/samba_deps.py     |  5 ++---
 lib/util/charset/wscript_configure    |  2 +-
 4 files changed, 20 insertions(+), 17 deletions(-)

diff --git a/buildtools/wafsamba/samba3.py b/buildtools/wafsamba/samba3.py
index 227ee27705da..ba0783f0d229 100644
--- a/buildtools/wafsamba/samba3.py
+++ b/buildtools/wafsamba/samba3.py
@@ -45,25 +45,25 @@ def s3_fix_kwargs(bld, kwargs):
                             '../bin/default/third_party/heimdal/lib/asn1' ]
 
     if bld.CONFIG_SET('USING_SYSTEM_TDB'):
-        (tdb_includes, tdb_ldflags, tdb_cpppath) = library_flags(bld, 'tdb')
+        (tdb_includes, tdb_ldflags, tdb_cpppath, tdb_libs) = library_flags(bld, 'tdb')
         extra_includes += tdb_cpppath
     else:
         extra_includes += [ '../lib/tdb/include' ]
 
     if bld.CONFIG_SET('USING_SYSTEM_TEVENT'):
-        (tevent_includes, tevent_ldflags, tevent_cpppath) = library_flags(bld, 'tevent')
+        (tevent_includes, tevent_ldflags, tevent_cpppath, tevent_libs) = library_flags(bld, 'tevent')
         extra_includes += tevent_cpppath
     else:
         extra_includes += [ '../lib/tevent' ]
 
     if bld.CONFIG_SET('USING_SYSTEM_TALLOC'):
-        (talloc_includes, talloc_ldflags, talloc_cpppath) = library_flags(bld, 'talloc')
+        (talloc_includes, talloc_ldflags, talloc_cpppath, talloc_libs) = library_flags(bld, 'talloc')
         extra_includes += talloc_cpppath
     else:
         extra_includes += [ '../lib/talloc' ]
 
     if bld.CONFIG_SET('USING_SYSTEM_POPT'):
-        (popt_includes, popt_ldflags, popt_cpppath) = library_flags(bld, 'popt')
+        (popt_includes, popt_ldflags, popt_cpppath, popt_libs) = library_flags(bld, 'popt')
         extra_includes += popt_cpppath
     else:
         extra_includes += [ '../lib/popt' ]
diff --git a/buildtools/wafsamba/samba_autoconf.py b/buildtools/wafsamba/samba_autoconf.py
index 16f962ded604..10775319c722 100644
--- a/buildtools/wafsamba/samba_autoconf.py
+++ b/buildtools/wafsamba/samba_autoconf.py
@@ -91,7 +91,7 @@ def CHECK_HEADER(conf, h, add_headers=False, lib=None):
                 conf.env.hlist.append(h)
         return True
 
-    (ccflags, ldflags, cpppath) = library_flags(conf, lib)
+    (ccflags, ldflags, cpppath, libs) = library_flags(conf, lib)
 
     hdrs = hlist_to_string(conf, headers=h)
     if lib is None:
@@ -435,7 +435,7 @@ def CHECK_CODE(conf, code, define,
 
     uselib = TO_LIST(lib)
 
-    (ccflags, ldflags, cpppath) = library_flags(conf, uselib)
+    (ccflags, ldflags, cpppath, libs) = library_flags(conf, uselib)
 
     includes = TO_LIST(includes)
     includes.extend(cpppath)
@@ -569,21 +569,24 @@ Build.BuildContext.CONFIG_SET = CONFIG_SET
 Build.BuildContext.CONFIG_GET = CONFIG_GET
 
 
-def library_flags(self, libs):
+def library_flags(self, library):
     '''work out flags from pkg_config'''
     ccflags = []
     ldflags = []
     cpppath = []
-    for lib in TO_LIST(libs):
+    libs = []
+    for lib in TO_LIST(library):
         # note that we do not add the -I and -L in here, as that is added by the waf
         # core. Adding it here would just change the order that it is put on the link line
         # which can cause system paths to be added before internal libraries
         extra_ccflags = TO_LIST(getattr(self.env, 'CFLAGS_%s' % lib.upper(), []))
         extra_ldflags = TO_LIST(getattr(self.env, 'LDFLAGS_%s' % lib.upper(), []))
         extra_cpppath = TO_LIST(getattr(self.env, 'CPPPATH_%s' % lib.upper(), []))
+        extra_libs = TO_LIST(getattr(self.env, 'LIB_%s' % lib.upper(), []))
         ccflags.extend(extra_ccflags)
         ldflags.extend(extra_ldflags)
         cpppath.extend(extra_cpppath)
+        libs.extend(extra_libs)
 
         extra_cpppath = TO_LIST(getattr(self.env, 'INCLUDES_%s' % lib.upper(), []))
         cpppath.extend(extra_cpppath)
@@ -593,11 +596,12 @@ def library_flags(self, libs):
     ccflags = unique_list(ccflags)
     ldflags = unique_list(ldflags)
     cpppath = unique_list(cpppath)
-    return (ccflags, ldflags, cpppath)
+    libs = unique_list(libs)
+    return (ccflags, ldflags, cpppath, libs)
 
 
 @conf
-def CHECK_LIB(conf, libs, mandatory=False, empty_decl=True, set_target=True, shlib=False):
+def CHECK_LIB(conf, library, mandatory=False, empty_decl=True, set_target=True, shlib=False):
     '''check if a set of libraries exist as system libraries
 
     returns the sublist of libs that do exist as a syslib or []
@@ -611,13 +615,13 @@ int foo()
 }
 '''
     ret = []
-    liblist  = TO_LIST(libs)
-    for lib in liblist[:]:
+    liblist  = TO_LIST(library)
+    for lib in liblist:
         if GET_TARGET_TYPE(conf, lib) == 'SYSLIB':
             ret.append(lib)
             continue
 
-        (ccflags, ldflags, cpppath) = library_flags(conf, lib)
+        (ccflags, ldflags, cpppath, libs) = library_flags(conf, lib)
         if shlib:
             res = conf.check(features='c cshlib', fragment=fragment, lib=lib, uselib_store=lib, cflags=ccflags, ldflags=ldflags, uselib=lib.upper(), mandatory=False)
         else:
diff --git a/buildtools/wafsamba/samba_deps.py b/buildtools/wafsamba/samba_deps.py
index 80379d37a9cd..6db44cc3a612 100644
--- a/buildtools/wafsamba/samba_deps.py
+++ b/buildtools/wafsamba/samba_deps.py
@@ -83,9 +83,8 @@ def build_dependencies(self):
         self.add_objects   = list(self.final_objects)
 
         # extra link flags from pkg_config
-        libs = self.final_syslibs.copy()
-
-        (cflags, ldflags, cpppath) = library_flags(self, list(libs))
+        (cflags, ldflags, cpppath, libs) = library_flags(
+            self, list(self.final_syslibs.copy()))
         new_ldflags        = getattr(self, 'samba_ldflags', [])[:]
         new_ldflags.extend(ldflags)
         self.ldflags       = new_ldflags
diff --git a/lib/util/charset/wscript_configure b/lib/util/charset/wscript_configure
index 9c27fc664f0e..58858f69b319 100644
--- a/lib/util/charset/wscript_configure
+++ b/lib/util/charset/wscript_configure
@@ -8,7 +8,7 @@
 # managed to link when specifying -liconv a executable even if there is no
 # libiconv.so or libiconv.a
 
-conf.CHECK_LIB(libs="iconv", shlib=True)
+conf.CHECK_LIB("iconv", shlib=True)
 
 #HP-UX can use libiconv as an add-on package, which has #define iconv_open libiconv_open
 if (conf.CHECK_FUNCS_IN('iconv_open', 'iconv', checklibc=False, headers='iconv.h') or
-- 
GitLab


From a67f68f8ad588e8a62676562fc3aeef8a4da2eb8 Mon Sep 17 00:00:00 2001
From: Earl Chew <earl_chew@yahoo.com>
Date: Sat, 16 Dec 2023 17:47:09 -0800
Subject: [PATCH 2/3] Improve CHECK_LIB interaction with CHECK_PKG

When checking for shared libraries, only name the target library
if it was not previously discoverd by pkg-config --libs and now
available from uselib_store. This avoids using both sources of
information which results in the library being named twice on
the command line.

Once the library is confirmed by CHECK_LIB, append the library if
not already present, to avoid dropping libraries that were
previously discovered by CHECK_PKG.

Signed-off-by: Earl Chew <earl_chew@yahoo.com>
---
 buildtools/wafsamba/samba_autoconf.py | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/buildtools/wafsamba/samba_autoconf.py b/buildtools/wafsamba/samba_autoconf.py
index 10775319c722..f55c520b5704 100644
--- a/buildtools/wafsamba/samba_autoconf.py
+++ b/buildtools/wafsamba/samba_autoconf.py
@@ -623,7 +623,12 @@ int foo()
 
         (ccflags, ldflags, cpppath, libs) = library_flags(conf, lib)
         if shlib:
-            res = conf.check(features='c cshlib', fragment=fragment, lib=lib, uselib_store=lib, cflags=ccflags, ldflags=ldflags, uselib=lib.upper(), mandatory=False)
+            # Avoid repeating the library if it is already named by
+            # pkg-config --libs.
+            kw = {}
+            if lib not in libs:
+                kw['lib'] = lib
+            res = conf.check(features='c cshlib', fragment=fragment, uselib_store=lib, cflags=ccflags, ldflags=ldflags, uselib=lib.upper(), mandatory=False, **kw)
         else:
             res = conf.check(lib=lib, uselib_store=lib, cflags=ccflags, ldflags=ldflags, uselib=lib.upper(), mandatory=False)
 
@@ -637,7 +642,10 @@ int foo()
                     SET_TARGET_TYPE(conf, lib, 'EMPTY')
         else:
             conf.define('HAVE_LIB%s' % lib.upper().replace('-','_').replace('.','_'), 1)
-            conf.env['LIB_' + lib.upper()] = lib
+            # To avoid losing information from pkg-config, append the library
+            # only it is not already present.
+            if lib not in libs:
+                conf.env.append_value('LIB_' + lib.upper(), lib)
             if set_target:
                 conf.SET_TARGET_TYPE(lib, 'SYSLIB')
             ret.append(lib)
-- 
GitLab


From ec9194d879147b9342b819d42e0ab875b567fba2 Mon Sep 17 00:00:00 2001
From: Earl Chew <earl_chew@yahoo.com>
Date: Sat, 16 Dec 2023 08:48:36 -0800
Subject: [PATCH 3/3] Combine ICU libraries icu-i18n and icu-uc into a single
 dependency

Rather than probing for icu-i18n, icu-uc, and icudata libraries
separately, only probe for icu-i18n, and icu-uc, as direct dependencies
This avoids overlinking with icudata, and allows the package
to build even when ICU is not installed as a system library.

RN: Only use icu-i18n and icu-uc to express ICU dependency

Signed-off-by: Earl Chew <earl_chew@yahoo.com>
---
 lib/util/charset/iconv.c           |  8 ++++----
 lib/util/charset/wscript_build     |  3 ++-
 lib/util/charset/wscript_configure | 17 +++++++----------
 3 files changed, 13 insertions(+), 15 deletions(-)

diff --git a/lib/util/charset/iconv.c b/lib/util/charset/iconv.c
index 131df6409866..074794a26e31 100644
--- a/lib/util/charset/iconv.c
+++ b/lib/util/charset/iconv.c
@@ -26,7 +26,7 @@
 #include "lib/util/charset/charset.h"
 #include "lib/util/charset/charset_proto.h"
 
-#ifdef HAVE_ICU_I18N
+#ifdef HAVE_ICUI18N
 #include <unicode/ustring.h>
 #include <unicode/utrans.h>
 #endif
@@ -168,7 +168,7 @@ static size_t sys_iconv(void *cd,
 }
 #endif
 
-#ifdef HAVE_ICU_I18N
+#ifdef HAVE_ICUI18N
 static size_t sys_uconv(void *cd,
 			const char **inbuf,
 			size_t *inbytesleft,
@@ -334,7 +334,7 @@ static bool is_utf16(const char *name)
 
 static int smb_iconv_t_destructor(smb_iconv_t hwd)
 {
-#ifdef HAVE_ICU_I18N
+#ifdef HAVE_ICUI18N
 	/*
 	 * This has to come first, as the cd_direct member won't be an iconv
 	 * handle and must not be passed to iconv_close().
@@ -418,7 +418,7 @@ _PUBLIC_ smb_iconv_t smb_iconv_open_ex(TALLOC_CTX *mem_ctx, const char *tocode,
 	}
 #endif
 
-#ifdef HAVE_ICU_I18N
+#ifdef HAVE_ICUI18N
 	if (strcasecmp(fromcode, "UTF8-NFD") == 0 &&
 	    strcasecmp(tocode, "UTF8-NFC") == 0)
 	{
diff --git a/lib/util/charset/wscript_build b/lib/util/charset/wscript_build
index c69a17170ad6..3af90a0ad574 100644
--- a/lib/util/charset/wscript_build
+++ b/lib/util/charset/wscript_build
@@ -6,7 +6,8 @@ bld.SAMBA_SUBSYSTEM('ICONV_WRAPPER',
                     weird.c
                     charset_macosxfs.c
                     ''',
-                    public_deps='iconv replace talloc ' +  bld.env['icu-libs'])
+                    deps=bld.env['icu-libs'],
+                    public_deps='iconv replace talloc')
 
 bld.SAMBA_SUBSYSTEM('charset',
                     public_headers='charset.h',
diff --git a/lib/util/charset/wscript_configure b/lib/util/charset/wscript_configure
index 58858f69b319..c49b55a4fd4b 100644
--- a/lib/util/charset/wscript_configure
+++ b/lib/util/charset/wscript_configure
@@ -37,15 +37,12 @@ conf.CHECK_CODE('''
                 lib='iconv',
                 headers='errno.h iconv.h')
 
-if conf.CHECK_CFG(package='icu-i18n',
+if conf.CHECK_CFG(package='icu-i18n icu-uc',
                args='--cflags --libs',
-               msg='Checking for icu-i18n',
-               uselib_store='ICU_I18N'):
-    for lib in conf.env['LIB_ICU_I18N']:
-        conf.CHECK_LIB(lib, shlib=True, mandatory=True)
-    conf.env['icu-libs'] = ' '.join(conf.env['LIB_ICU_I18N'])
-    if not conf.CHECK_HEADERS('unicode/ustring.h'):
-        conf.fatal('Found libicu, but unicode/ustring.h is missing')
+               msg='Checking for icu-i18n icu-uc',
+               uselib_store='ICUI18N'):
+    conf.env['icu-libs'] = 'icui18n'
+    conf.CHECK_LIB(conf.env['icu-libs'], shlib=True, mandatory=True)
+    if not conf.CHECK_HEADERS('unicode/ustring.h', lib='icui18n'):
+        conf.fatal('Found icui18n, but unicode/ustring.h is missing')
     conf.DEFINE('HAVE_UTF8_NORMALISATION', 1)
-else:
-    conf.env['icu-libs'] = ''
-- 
GitLab

