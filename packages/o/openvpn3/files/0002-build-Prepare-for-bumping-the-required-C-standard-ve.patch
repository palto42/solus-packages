From ab869123ed9df4f63670e84a46c3e309752164b6 Mon Sep 17 00:00:00 2001
From: Razvan Cojocaru <razvan.cojocaru@openvpn.com>
Date: Mon, 28 Apr 2025 10:08:41 +0000
Subject: [PATCH 2/5] build: Prepare for bumping the required C++ standard
 version to C++20

The OpenVPN 3 Core library will from version 3.12 require C++20,
so we will need to bump the required C++ standard version to C++20
for the Linux client as well in the nearer future.

Preparing for that, we address the "error: implicit capture of
'this' via '[=]' is deprecated in C++20" message.

Signed-off-by: Razvan Cojocaru <razvan.cojocaru@openvpn.com>
---
 src/configmgr/configmgr-configuration.cpp |  8 ++--
 src/dbus/signals/attention-required.cpp   |  5 +--
 src/dbus/signals/log.cpp                  |  2 +-
 src/dbus/signals/statuschange.cpp         |  6 +--
 src/log/log-proxylog.cpp                  |  2 +-
 src/netcfg/netcfg-dco.cpp                 |  4 +-
 src/netcfg/netcfg-device.cpp              |  2 +-
 src/sessionmgr/sessionmgr-session.cpp     | 54 +++++++++++------------
 src/sessionmgr/tunnel-queue.cpp           |  2 +-
 src/tests/dbus/log-listener.cpp           |  2 +-
 src/tests/dbus/signal-listener.cpp        |  2 +-
 11 files changed, 44 insertions(+), 45 deletions(-)

diff --git a/src/configmgr/configmgr-configuration.cpp b/src/configmgr/configmgr-configuration.cpp
index 33d3bb8..2316c28 100644
--- a/src/configmgr/configmgr-configuration.cpp
+++ b/src/configmgr/configmgr-configuration.cpp
@@ -510,14 +510,14 @@ void Configuration::add_properties()
     AddPropertyBySpec(
         "owner",
         glib2::DataType::DBus<uint32_t>(),
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
         {
             return glib2::Value::Create(object_acl_->GetOwner());
         });
 
     AddPropertyBySpec("acl",
                       "au",
-                      [=](const DBus::Object::Property::BySpec &prop)
+                      [this](const DBus::Object::Property::BySpec &prop)
                       {
                           using namespace glib2::Builder;
 
@@ -526,7 +526,7 @@ void Configuration::add_properties()
 
     AddPropertyBySpec("overrides",
                       "a{sv}",
-                      [=](const DBus::Object::Property::BySpec &prop)
+                      [this](const DBus::Object::Property::BySpec &prop)
                       {
                           GVariantBuilder *b = glib2::Builder::Create("a{sv}");
 
@@ -547,7 +547,7 @@ void Configuration::add_properties()
     AddPropertyBySpec(
         "public_access",
         "b",
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
         {
             return glib2::Value::Create(object_acl_->GetPublicAccess());
         },
diff --git a/src/dbus/signals/attention-required.cpp b/src/dbus/signals/attention-required.cpp
index fc3babc..f968502 100644
--- a/src/dbus/signals/attention-required.cpp
+++ b/src/dbus/signals/attention-required.cpp
@@ -32,10 +32,9 @@ AttentionRequired::AttentionRequired(DBus::Signals::Emit::Ptr emitter,
     {
         subscr->Subscribe(subscr_tgt,
                           "AttentionRequired",
-                          [=](DBus::Signals::Event::Ptr event)
+                          [this](DBus::Signals::Event::Ptr event)
                           {
-                              try
-                              {
+								  try {
                                   Events::AttentionReq ev(event->params);
                                   (void)Send(ev);
                               }
diff --git a/src/dbus/signals/log.cpp b/src/dbus/signals/log.cpp
index a76ac4a..e46689d 100644
--- a/src/dbus/signals/log.cpp
+++ b/src/dbus/signals/log.cpp
@@ -32,7 +32,7 @@ Log::Log(DBus::Signals::Emit::Ptr emitter,
     {
         subscr->Subscribe(target,
                           "Log",
-                          [=](DBus::Signals::Event::Ptr event)
+                          [this](DBus::Signals::Event::Ptr event)
                           {
                               try
                               {
diff --git a/src/dbus/signals/statuschange.cpp b/src/dbus/signals/statuschange.cpp
index edf9d4d..b6673a0 100644
--- a/src/dbus/signals/statuschange.cpp
+++ b/src/dbus/signals/statuschange.cpp
@@ -32,9 +32,9 @@ StatusChange::StatusChange(DBus::Signals::Emit::Ptr emitter,
     {
         subscr->Subscribe(target,
                           "StatusChange",
-                          [=](DBus::Signals::Event::Ptr event)
-                          {
-                              try
+                          [this](DBus::Signals::Event::Ptr event)
+						  {
+							  try
                               {
                                   Events::Status ev(event->params);
                                   (void)Send(ev);
diff --git a/src/log/log-proxylog.cpp b/src/log/log-proxylog.cpp
index 26eb6b0..b639efe 100644
--- a/src/log/log-proxylog.cpp
+++ b/src/log/log-proxylog.cpp
@@ -62,7 +62,7 @@ ProxyLogEvents::ProxyLogEvents(DBus::Connection::Ptr connection_,
     signal_proxy->AddTarget(receiver_target);
 
     AddMethod("Remove",
-              [=](DBus::Object::Method::Arguments::Ptr args)
+              [this](DBus::Object::Method::Arguments::Ptr args)
               {
                   object_mgr->RemoveObject(GetPath());
                   args->SetMethodReturn(nullptr);
diff --git a/src/netcfg/netcfg-dco.cpp b/src/netcfg/netcfg-dco.cpp
index 217e52b..fe30fb8 100644
--- a/src/netcfg/netcfg-dco.cpp
+++ b/src/netcfg/netcfg-dco.cpp
@@ -267,7 +267,7 @@ void NetCfgDCO::method_new_key(GVariant *params)
     };
 
     openvpn_io::post(io_context,
-                     [=]()
+                     [this, key_slot, dco_kc, copyKeyDirection]()
                      {
                          KoRekey::KeyConfig kc;
                          std::memset(&kc, 0, sizeof(kc));
@@ -292,7 +292,7 @@ void NetCfgDCO::method_swap_keys(GVariant *params)
     unsigned int peer_id = glib2::Value::Extract<unsigned int>(params, 0);
 
     openvpn_io::post(io_context,
-                     [=]()
+                     [this, peer_id]()
                      {
                          this->genl->swap_keys(peer_id);
                      });
diff --git a/src/netcfg/netcfg-device.cpp b/src/netcfg/netcfg-device.cpp
index c8bac50..a788ed6 100644
--- a/src/netcfg/netcfg-device.cpp
+++ b/src/netcfg/netcfg-device.cpp
@@ -84,7 +84,7 @@ NetCfgDevice::NetCfgDevice(DBus::Connection::Ptr dbuscon_,
     AddPropertyBySpec(
         "acl",
         "au",
-        [=](const DBus::Object::Property::BySpec &prop) -> GVariant *
+        [this](const DBus::Object::Property::BySpec &prop) -> GVariant *
         {
             return glib2::Value::CreateVector(object_acl->GetAccessList());
         });
diff --git a/src/sessionmgr/sessionmgr-session.cpp b/src/sessionmgr/sessionmgr-session.cpp
index bbb61cd..8bb956e 100644
--- a/src/sessionmgr/sessionmgr-session.cpp
+++ b/src/sessionmgr/sessionmgr-session.cpp
@@ -117,7 +117,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     AddMethod(
         "Ready",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             method_ready(args);
         });
@@ -125,14 +125,14 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     AddMethod(
         "Connect",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             method_connect(args);
         });
 
     AddMethod(
         "Restart",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             method_proxy_be(args, "Restart", true);
             sig_session->LogVerb2("Session restarting - " + GetPath());
@@ -140,7 +140,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     auto arg_pause = AddMethod(
         "Pause",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             GVariant *params = args->GetMethodParameters();
             auto reason = filter_ctrl_chars(
@@ -155,7 +155,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     AddMethod(
         "Resume",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             method_proxy_be(args, "Resume", true);
             sig_session->LogVerb2("Session resuming - " + GetPath());
@@ -163,7 +163,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     AddMethod(
         "Disconnect",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             close_session(false);
             sig_session->LogVerb2("Session disconnecting - " + GetPath());
@@ -173,7 +173,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     auto arg_grant = AddMethod(
         "AccessGrant",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             method_access_grant(args);
         });
@@ -182,7 +182,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     auto arg_revoke = AddMethod(
         "AccessRevoke",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             method_access_revoke(args);
         });
@@ -190,7 +190,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     auto arg_logfwd = AddMethod(
         "LogForward",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             method_log_forward(args);
         });
@@ -198,7 +198,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     auto arg_usrinpq_gettypegr = AddMethod(
         "UserInputQueueGetTypeGroup",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             validate_vpn_backend();
             GVariant *r = be_prx->Call(be_target,
@@ -209,7 +209,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     auto arg_usrinpq_fetch = AddMethod(
         "UserInputQueueFetch",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             validate_vpn_backend();
             GVariant *r = be_prx->Call(be_target,
@@ -229,7 +229,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     auto arg_usrinpq_check = AddMethod(
         "UserInputQueueCheck",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             validate_vpn_backend();
             GVariant *r = be_prx->Call(be_target,
@@ -243,7 +243,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
 
     auto arg_usrinpq_provide = AddMethod(
         "UserInputProvide",
-        [=](Object::Method::Arguments::Ptr args)
+        [this](Object::Method::Arguments::Ptr args)
         {
             validate_vpn_backend();
             GVariant *r = be_prx->Call(be_target,
@@ -267,7 +267,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "log_forwards",
         "ao",
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             // Avoid parallel access to the log_forwarders map;
@@ -286,7 +286,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "owner",
         glib2::DataType::DBus<uint32_t>(),
-        [=](const DBus::Object::Property::BySpec &prop) -> GVariant *
+        [this](const DBus::Object::Property::BySpec &prop) -> GVariant *
         {
             return glib2::Value::Create(object_acl->GetOwner());
         });
@@ -296,7 +296,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "acl",
         "au",
-        [=](const DBus::Object::Property::BySpec &prop) -> GVariant *
+        [this](const DBus::Object::Property::BySpec &prop) -> GVariant *
         {
             return glib2::Value::CreateVector(object_acl->GetAccessList());
         });
@@ -305,7 +305,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "status",
         sig_statuschg->GetSignature(),
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             return sig_statuschg->LastStatusChange();
@@ -315,7 +315,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "last_log",
         "a{sv}",
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             return sig_session->GetLastLogEvent().GetGVariantDict();
@@ -325,7 +325,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "statistics",
         "a{sx}",
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             validate_vpn_backend("statistics");
@@ -338,7 +338,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
         // Ideally, the data type here should be DBus::Object::Path,
         // but it must support an empty value until the device is configured
         glib2::DataType::DBus<std::string>(),
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             validate_vpn_backend("device_path");
@@ -349,7 +349,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "device_name",
         glib2::DataType::DBus<std::string>(),
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             validate_vpn_backend("device_name");
@@ -359,7 +359,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "session_name",
         glib2::DataType::DBus<std::string>(),
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             validate_vpn_backend("session_name");
@@ -369,7 +369,7 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "connected_to",
         "(ssu)",
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             validate_vpn_backend("connection");
@@ -401,12 +401,12 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "log_verbosity",
         glib2::DataType::DBus<uint32_t>(),
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             return glib2::Value::Create(sig_session->GetLogLevel());
         },
-        [=](const DBus::Object::Property::BySpec &prop, GVariant *value)
+        [this](const DBus::Object::Property::BySpec &prop, GVariant *value)
             -> DBus::Object::Property::Update::Ptr
         {
             auto v = glib2::Value::Get<uint32_t>(value);
@@ -431,12 +431,12 @@ Session::Session(DBus::Connection::Ptr dbuscon,
     AddPropertyBySpec(
         "public_access",
         glib2::DataType::DBus<bool>(),
-        [=](const DBus::Object::Property::BySpec &prop)
+        [this](const DBus::Object::Property::BySpec &prop)
             -> GVariant *
         {
             return glib2::Value::Create(object_acl->GetPublicAccess());
         },
-        [=](const DBus::Object::Property::BySpec &prop, GVariant *value)
+        [this](const DBus::Object::Property::BySpec &prop, GVariant *value)
             -> DBus::Object::Property::Update::Ptr
         {
             object_acl->SetPublicAccess(glib2::Value::Get<bool>(value));
diff --git a/src/sessionmgr/tunnel-queue.cpp b/src/sessionmgr/tunnel-queue.cpp
index f1dd020..88713ab 100644
--- a/src/sessionmgr/tunnel-queue.cpp
+++ b/src/sessionmgr/tunnel-queue.cpp
@@ -64,7 +64,7 @@ NewTunnelQueue::NewTunnelQueue(DBus::Connection::Ptr dbuscon_,
                                                   Constants::GenInterface("backends"));
     signal_subscr->Subscribe(subscr_target,
                              "RegistrationRequest",
-                             [=](DBus::Signals::Event::Ptr event)
+                             [this](DBus::Signals::Event::Ptr event)
                              {
                                  process_registration(event);
                              });
diff --git a/src/tests/dbus/log-listener.cpp b/src/tests/dbus/log-listener.cpp
index 927c7a4..88dc6a8 100644
--- a/src/tests/dbus/log-listener.cpp
+++ b/src/tests/dbus/log-listener.cpp
@@ -42,7 +42,7 @@ class LogHandler
         logrecv = Signals::ReceiveLog::Create(
             subscrmgr,
             subscr_target,
-            [=](Events::Log logevent)
+            [this](Events::Log logevent)
             {
                 std::cout << "[" << tag << "] " << logevent << std::endl;
             });
diff --git a/src/tests/dbus/signal-listener.cpp b/src/tests/dbus/signal-listener.cpp
index 438ee1e..ba2a35f 100644
--- a/src/tests/dbus/signal-listener.cpp
+++ b/src/tests/dbus/signal-listener.cpp
@@ -50,7 +50,7 @@ class SigSubscription
         tgt_subscription = DBus::Signals::Target::Create(bus_name, object_path, interface);
         sig_subscrptions->Subscribe(tgt_subscription,
                                     signal_name,
-                                    [=](DBus::Signals::Event::Ptr event)
+                                    [this](DBus::Signals::Event::Ptr event)
                                     {
                                         try
                                         {
-- 
2.49.0

