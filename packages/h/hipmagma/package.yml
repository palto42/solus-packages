name       : hipmagma
version    : 2.8.0
release    : 2
source     :
    # tag: v2.8.0
    - git|https://github.com/icl-utk-edu/magma.git : 06368d9b817710566f654b96114549216f8cee70
homepage   : https://icl.utk.edu/magma/
license    : BSD-3-Clause
component  : programming.library
summary    : Matrix Algebra on GPU and Multicore Architectures (ROCm/HIP Backend)
description: |
    Matrix Algebra on GPU and Multicore Architectures
builddeps  :
    - pkgconfig(lapack)
    - pkgconfig(openblas)
    - rocblas-devel
    - rocm-core-devel
    - rocsparse-devel
    - hipblas-devel
    - hipsparse-devel
    - rocm-cmake
    - rocm-hip
environment: |
    export CXXFLAGS="${CXXFLAGS/-D_FORTIFY_SOURCE=2 -fstack-protector-strong --param=ssp-buffer-size=32/-fcf-protection=none}"
    # Enabling debug causes relocation out of range error
    export CXXFLAGS="${CXXFLAGS/ -g2/}"
    # Too noisy
    export CXXFLAGS+=" -w"

    export ROCM_PATH=/usr
    export HIP_CLANG_PATH=/usr/lib64/llvm-rocm/bin
    export DEVICE_LIB_PATH=/usr/lib64/amdgcn/bitcode
    export CMAKE_PREFIX_PATH=/usr/lib64/llvm-rocm

    export AMDGPU_TARGETS="%AMDGPUTARGETS%"

    if [ -e /usr/bin/sccache ]; then
        export HIP_CLANG_LAUNCHER=/usr/bin/sccache
    fi
setup      : |
    echo "set_target_properties(magma PROPERTIES VERSION %version% SOVERSION 2.8)" >> CMakeLists.txt
    echo "set_target_properties(magma_sparse PROPERTIES VERSION %version% SOVERSION 2.8)" >> CMakeLists.txt

    cp make.inc-examples/make.inc.hip-gcc-openblas make.inc
    %make OPENBLASDIR=/usr ROCM_PATH=$ROCM_PATH generate

    %patch -p1 -i $pkgfiles/add-hip-device-to-magma.patch

    # Similarly, use Release instead of RelWithDbgInfo to prevent 
    # relocation out of range error
    %cmake_ninja -L \
      -DCMAKE_INSTALL_LIBDIR=lib%LIBSUFFIX% \
      -DCMAKE_BUILD_TYPE=Release \
      -DROCM_CORE=$ROCM_PATH \
      -DCMAKE_CXX_COMPILER=hipcc \
      -DMAGMA_ENABLE_CUDA=OFF \
      -DMAGMA_ENABLE_HIP=ON \
      -DBUILD_SHARED_LIBS=ON \
      -DGPU_TARGET="$AMDGPU_TARGETS" \
      -DAMDGPU_TARGETS="$AMDGPU_TARGETS" \
build      : |
    # We don't need to build for all architectures during setup/install phase.
    # This makes CMake compiler checks much faster.
    # export HCC_AMDGPU_TARGET="$(echo $AMDGPU_TARGETS | tr ";" ",")"
    %ninja_build lib sparse-lib
install    : |
    %ninja_install
    mv $installdir/usr/lib $installdir/%libdir%
