diff -up qtwebkit-5.212.20211230/Source/WTF/wtf/StdLibExtras.h.omv~ qtwebkit-5.212.20211230/Source/WTF/wtf/StdLibExtras.h
--- qtwebkit-5.212.20211230/Source/WTF/wtf/StdLibExtras.h.omv~	2024-05-31 16:48:50.071167676 +0200
+++ qtwebkit-5.212.20211230/Source/WTF/wtf/StdLibExtras.h	2024-05-31 16:51:04.256622972 +0200
@@ -291,8 +291,8 @@ inline void* operator new(size_t, NotNul
 
 // This adds various C++14 features for versions of the STL that may not yet have them.
 namespace std {
-// MSVC 2013 supports std::make_unique already.
-#if !defined(_MSC_VER) || _MSC_VER < 1800
+// MSVC 2013 supports std::make_unique already, as does any other compiler
+#if 0
 template<class T> struct _Unique_if {
     typedef unique_ptr<T> _Single_object;
 };
@@ -322,8 +322,8 @@ template<class T, class... Args> typenam
 make_unique(Args&&...) = delete;
 #endif
 
-// MSVC 2015 supports these functions.
-#if !COMPILER(MSVC) || _MSC_VER < 1900
+// MSVC 2015 supports these functions -- as does any other compiler in C++14 and higher
+#if 0
 // Compile-time integer sequences
 // http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3658.html
 // (Note that we only implement index_sequence, and not the more generic integer_sequence).
@@ -354,7 +354,7 @@ T exchange(T& t, U&& newValue)
 }
 #endif
 
-#if COMPILER_SUPPORTS(CXX_USER_LITERALS)
+#if 0 //COMPILER_SUPPORTS(CXX_USER_LITERALS)
 // These literals are available in C++14, so once we require C++14 compilers we can get rid of them here.
 // (User-literals need to have a leading underscore so we add it here - the "real" literals don't have underscores).
 namespace literals {
diff -up qtwebkit-5.212.20211230/Source/cmake/OptionsCommon.cmake.omv~ qtwebkit-5.212.20211230/Source/cmake/OptionsCommon.cmake
--- qtwebkit-5.212.20211230/Source/cmake/OptionsCommon.cmake.omv~	2024-05-31 16:38:36.283948477 +0200
+++ qtwebkit-5.212.20211230/Source/cmake/OptionsCommon.cmake	2024-05-31 16:38:41.448015366 +0200
@@ -31,7 +31,7 @@ set_property(GLOBAL PROPERTY USE_FOLDERS
 if (COMPILER_IS_GCC_OR_CLANG)
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-exceptions -fno-strict-aliasing")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions -fno-strict-aliasing -fno-rtti")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
 endif ()
 
 if (COMPILER_IS_CLANG AND CMAKE_GENERATOR STREQUAL "Ninja")
diff -up qtwebkit-5.212.20211230/Source/WebKit2/NetworkProcess/NetworkResourceLoadParameters.cpp.omv~ qtwebkit-5.212.20211230/Source/WebKit2/NetworkProcess/NetworkResourceLoadParameters.cpp
--- qtwebkit-5.212.20211230/Source/WebKit2/NetworkProcess/NetworkResourceLoadParameters.cpp.omv~	2024-05-31 19:10:59.013994943 +0200
+++ qtwebkit-5.212.20211230/Source/WebKit2/NetworkProcess/NetworkResourceLoadParameters.cpp	2024-05-31 19:11:02.870032607 +0200
@@ -45,7 +45,7 @@ NetworkResourceLoadParameters::NetworkRe
     , shouldClearReferrerOnHTTPSToHTTPRedirect(true)
     , defersLoading(false)
     , needsCertificateInfo(false)
-    , maximumBufferingTime(0_ms)
+    , maximumBufferingTime(0ms)
 {
 }
 
diff -up qtwebkit-5.212.20211230/Source/WebKit2/NetworkProcess/NetworkResourceLoader.cpp.omv~ qtwebkit-5.212.20211230/Source/WebKit2/NetworkProcess/NetworkResourceLoader.cpp
--- qtwebkit-5.212.20211230/Source/WebKit2/NetworkProcess/NetworkResourceLoader.cpp.omv~	2024-05-31 19:13:40.587564571 +0200
+++ qtwebkit-5.212.20211230/Source/WebKit2/NetworkProcess/NetworkResourceLoader.cpp	2024-05-31 19:13:45.703614013 +0200
@@ -192,7 +192,7 @@ void NetworkResourceLoader::startNetwork
 {
     consumeSandboxExtensions();
 
-    if (isSynchronous() || m_parameters.maximumBufferingTime > 0_ms)
+    if (isSynchronous() || m_parameters.maximumBufferingTime > 0ms)
         m_bufferedData = SharedBuffer::create();
 
 #if ENABLE(NETWORK_CACHE)
diff -up qtwebkit-5.212.20211230/Source/WebKit2/WebProcess/Network/WebLoaderStrategy.cpp.omv~ qtwebkit-5.212.20211230/Source/WebKit2/WebProcess/Network/WebLoaderStrategy.cpp
--- qtwebkit-5.212.20211230/Source/WebKit2/WebProcess/Network/WebLoaderStrategy.cpp.omv~	2024-05-31 19:14:47.548210620 +0200
+++ qtwebkit-5.212.20211230/Source/WebKit2/WebProcess/Network/WebLoaderStrategy.cpp	2024-05-31 19:14:59.460325317 +0200
@@ -90,11 +90,11 @@ RefPtr<NetscapePlugInStreamLoader> WebLo
 static std::chrono::milliseconds maximumBufferingTime(CachedResource* resource)
 {
 #if !ENABLE(NETWORK_CACHE)
-    return 0_ms;
+    return 0ms;
 #endif
 
     if (!resource)
-        return 0_ms;
+        return 0ms;
 
     switch (resource->type()) {
     case CachedResource::CSSStyleSheet:
@@ -105,7 +105,7 @@ static std::chrono::milliseconds maximum
     case CachedResource::FontResource:
         return std::chrono::milliseconds::max();
     case CachedResource::ImageResource:
-        return 500_ms;
+        return 500ms;
     case CachedResource::MainResource:
     case CachedResource::RawResource:
     case CachedResource::SVGDocumentResource:
@@ -119,11 +119,11 @@ static std::chrono::milliseconds maximum
 #if ENABLE(XSLT)
     case CachedResource::XSLStyleSheet:
 #endif
-        return 0_ms;
+        return 0ms;
     }
 
     ASSERT_NOT_REACHED();
-    return 0_ms;
+    return 0ms;
 }
 
 void WebLoaderStrategy::scheduleLoad(ResourceLoader* resourceLoader, CachedResource* resource, bool shouldClearReferrerOnHTTPSToHTTPRedirect)
